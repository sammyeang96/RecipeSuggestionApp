import { AfterViewChecked, ElementRef, EventEmitter, NgZone } from '@angular/core';
import { Store } from '@ngrx/store';
import * as Immutable from 'immutable';
import { DomSanitizer, SafeUrl } from '@angular/platform-browser';
import { AppState } from '../models/state.model';
import { SlideshowEvent } from '../models/slideshow-event.model';
export declare class SlideshowComponent implements AfterViewChecked {
    private domSanitizer;
    private store;
    private elementRef;
    private zone;
    /**
     * The immutable list of images
     *
     *@type {Immutable.List<any>}
     */
    images: Immutable.List<any>;
    /**
     * Configurable options for the slideshow
     *
     * @type {Immutable.List<any>}
     */
    options: Immutable.Map<any, any>;
    /**
     * Event dispatcher
     *
     * @type {EventEmitter<SlideshowEvent>}
     */
    eventDispatcher: EventEmitter<SlideshowEvent>;
    /**
     * Offset state subscription
     *
     * @type any
     */
    offsetStateSubscription: any;
    /**
     * Loading state subscription
     *
     * @type any
     */
    loadingStateSubscription: any;
    /**
     * Offset status
     *
     * @type number
     */
    offsetStatus: number;
    /**
     * Loading status
     *
     * @type string
     */
    loadingStatus: string;
    /**
     * Thumbnail offset
     *
     * @type number
     */
    thumbnailOffset: number;
    /**
     * A list of DOM Elements
     *
     * @type Array<any>
     */
    domElements: Array<any>;
    /**
     * @constructor
     * @param domSanitizer
     * @param store
     * @param elementRef
     * @param zone
     */
    constructor(domSanitizer: DomSanitizer, store: Store<AppState>, elementRef: ElementRef, zone: NgZone);
    /**
     * After view is checked event
     *
     * @returns {void}
     */
    ngAfterViewChecked(): void;
    /**
     * Moves a slide outside of the Angular Zone
     *
     * @param direction
     * @param evt
     * @returns {void}
     */
    moveSlide(direction?: string, evt?: any): void;
    /**
     * Slides an Element given a direction
     *
     * @param direction
     * @returns {void}
     */
    slide(direction?: string): void;
    /**
     * On the active element transition end event
     *
     * @param evt
     * @returns void
     */
    onActiveTransitionEnd(evt: any): void;
    /**
     * Clears the current active element
     *
     * @param target
     * @returns {void}
     */
    clearActiveElement(target: HTMLElement): void;
    /**
     * Clears previous element
     *
     * @param element
     * @returns void
     */
    clearPreviousElement(element: HTMLElement): void;
    /**
     * Clears next element
     *
     * @param element
     * @returns void
     */
    clearNextElement(element: HTMLElement): void;
    /**
     * On swipe events
     *
     * @param action
     * @returns void
     */
    swipe(action?: string): void;
    /**
     * Returns a HTML Element
     *
     * @param selector
     * @param single
     * @returns {any}
     */
    getDomElement(selector: string, single?: boolean): any;
    /**
     * Sets an element to the left
     *
     * @param elem
     * @returns {void}
     */
    moveLeft(elem: any): void;
    /**
     * Sets an element to the right
     *
     * @param elem
     * @returns {void}
     */
    moveRight(elem: any): void;
    /**
     * Slides an element to the left
     *
     * @param elem
     * @returns {void}
     */
    slideLeft(elem: any): void;
    /**
     * Slides an element to the right
     *
     * @param elem
     * @returns {void}
     */
    slideRight(elem: any): void;
    /**
     * Slides in an element
     *
     * @param elem
     * @returns {void}
     */
    slideIn(elem: any): void;
    /**
     * Show an element given its index
     *
     * @param index
     * @returns void
     */
    showByIndex(index: number): void;
    /**
     * Slides in an element given its index
     *
     * @param index
     * @returns {void}
     */
    slideInElementByIndex(index: number): void;
    /**
     * Replaces current active element
     *
     * @param activeElement
     * @param replacementElement
     * @param direction
     * @returns {void}
     */
    replaceActiveElement(activeElement: HTMLElement, replacementElement: HTMLElement, direction?: string): void;
    /**
     * Initializes the thumbnails container
     *
     * @returns {void}
     */
    initializeThumbnailContainer(): void;
    /**
     * Slides thumbnails to a given direction
     *
     * @param container
     * @param direction
     * @returns {void}
     */
    slideThumbnails(container: HTMLElement, direction?: string): void;
    /**
     * Slides thumbnails to right
     *
     * @param container
     * @returns {void}
     */
    moveThumbnailsRight(container: HTMLElement): void;
    /**
     * Slides thumbnails to left
     *
     * @param container
     * @returns {void}
     */
    moveThumbnailsLeft(container: HTMLElement): void;
    /**
     * Gets a protected safe url to use
     *
     * @param imageUrl
     * @returns {SafeStyle}
     */
    getSafeUrl(imageUrl: string): SafeUrl;
}
