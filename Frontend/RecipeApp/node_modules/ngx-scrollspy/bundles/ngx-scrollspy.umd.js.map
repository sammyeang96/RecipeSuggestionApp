{"version":3,"file":"ngx-scrollspy.umd.js","sources":["~/ngx-scrollspy/src/plugin/parallax.ts","~/ngx-scrollspy/src/plugin/parallax.directive.ts","~/ngx-scrollspy/src/plugin/infinite.ts","~/ngx-scrollspy/src/plugin/infinite.directive.ts","../../../node_modules/rxjs/src/internal/operators/withLatestFrom.ts","../../../node_modules/rxjs/src/internal/operators/windowWhen.ts","../../../node_modules/rxjs/src/internal/operators/windowToggle.ts","../../../node_modules/rxjs/src/internal/operators/windowTime.ts","../../../node_modules/rxjs/src/internal/operators/windowCount.ts","../../../node_modules/rxjs/src/internal/operators/window.ts","../../../node_modules/rxjs/src/internal/operators/timeoutWith.ts","../../../node_modules/rxjs/src/internal/operators/throttleTime.ts","../../../node_modules/rxjs/src/internal/operators/throttle.ts","../../../node_modules/rxjs/src/internal/operators/takeWhile.ts","../../../node_modules/rxjs/src/internal/operators/takeUntil.ts","../../../node_modules/rxjs/src/internal/operators/switchMap.ts","../../../node_modules/rxjs/src/internal/operators/subscribeOn.ts","../../../node_modules/rxjs/src/internal/observable/SubscribeOnObservable.ts","../../../node_modules/rxjs/src/internal/operators/skipWhile.ts","../../../node_modules/rxjs/src/internal/operators/skipUntil.ts","../../../node_modules/rxjs/src/internal/operators/skipLast.ts","../../../node_modules/rxjs/src/internal/operators/skip.ts","../../../node_modules/rxjs/src/internal/operators/single.ts","../../../node_modules/rxjs/src/internal/operators/sequenceEqual.ts","../../../node_modules/rxjs/src/internal/operators/sampleTime.ts","../../../node_modules/rxjs/src/internal/operators/sample.ts","../../../node_modules/rxjs/src/internal/operators/retryWhen.ts","../../../node_modules/rxjs/src/internal/operators/retry.ts","../../../node_modules/rxjs/src/internal/operators/repeatWhen.ts","../../../node_modules/rxjs/src/internal/operators/repeat.ts","../../../node_modules/rxjs/src/internal/operators/pairwise.ts","../../../node_modules/rxjs/src/internal/operators/onErrorResumeNext.ts","../../../node_modules/rxjs/src/internal/operators/multicast.ts","../../../node_modules/rxjs/src/internal/operators/mergeScan.ts","../../../node_modules/rxjs/src/internal/operators/scan.ts","../../../node_modules/rxjs/src/internal/operators/materialize.ts","../../../node_modules/rxjs/src/internal/operators/mapTo.ts","../../../node_modules/rxjs/src/internal/operators/takeLast.ts","../../../node_modules/rxjs/src/internal/operators/isEmpty.ts","../../../node_modules/rxjs/src/internal/operators/ignoreElements.ts","../../../node_modules/rxjs/src/internal/operators/find.ts","../../../node_modules/rxjs/src/internal/operators/finalize.ts","../../../node_modules/rxjs/src/internal/operators/expand.ts","../../../node_modules/rxjs/src/internal/operators/exhaustMap.ts","../../../node_modules/rxjs/src/internal/operators/exhaust.ts","../../../node_modules/rxjs/src/internal/operators/every.ts","../../../node_modules/rxjs/src/internal/operators/take.ts","../../../node_modules/rxjs/src/internal/operators/tap.ts","../../../node_modules/rxjs/src/internal/operators/filter.ts","../../../node_modules/rxjs/src/internal/operators/distinctUntilChanged.ts","../../../node_modules/rxjs/src/internal/operators/distinct.ts","../../../node_modules/rxjs/src/internal/operators/dematerialize.ts","../../../node_modules/rxjs/src/internal/operators/delayWhen.ts","../../../node_modules/rxjs/src/internal/operators/delay.ts","../../../node_modules/rxjs/src/internal/operators/defaultIfEmpty.ts","../../../node_modules/rxjs/src/internal/operators/debounceTime.ts","../../../node_modules/rxjs/src/internal/operators/debounce.ts","../../../node_modules/rxjs/src/internal/operators/count.ts","../../../node_modules/rxjs/src/internal/operators/catchError.ts","../../../node_modules/rxjs/src/internal/operators/bufferWhen.ts","../../../node_modules/rxjs/src/internal/operators/bufferToggle.ts","../../../node_modules/rxjs/src/internal/operators/bufferTime.ts","../../../node_modules/rxjs/src/internal/operators/bufferCount.ts","../../../node_modules/rxjs/src/internal/operators/buffer.ts","../../../node_modules/rxjs/src/internal/operators/audit.ts","~/ngx-scrollspy/src/plugin/index.ts","~/ngx-scrollspy/src/plugin/index.component.ts","~/ngx-scrollspy/src/plugin/index.directive.ts","~/ngx-scrollspy/src/plugin/affix.ts","~/ngx-scrollspy/src/plugin/affix.directive.ts","~/ngx-scrollspy/src/module.ts","~/ngx-scrollspy/src/plugin/index.service.ts","~/ngx-scrollspy/src/core/element.directive.ts","~/ngx-scrollspy/src/core/window.directive.ts","../../../node_modules/rxjs/src/internal/observable/zip.ts","../../../node_modules/rxjs/src/internal/observable/race.ts","../../../node_modules/rxjs/src/internal/observable/never.ts","../../../node_modules/rxjs/src/internal/util/isNumeric.ts","../../../node_modules/rxjs/src/internal/observable/forkJoin.ts","../../../node_modules/rxjs/src/internal/operators/mergeMap.ts","../../../node_modules/rxjs/src/internal/observable/combineLatest.ts","../../../node_modules/rxjs/src/internal/util/subscribeToResult.ts","../../../node_modules/rxjs/src/internal/util/subscribeTo.ts","../../../node_modules/rxjs/src/internal/util/isPromise.ts","../../../node_modules/rxjs/src/internal/util/subscribeToObservable.ts","../../../node_modules/rxjs/src/internal/util/subscribeToIterable.ts","../../../node_modules/rxjs/src/internal/symbol/iterator.ts","../../../node_modules/rxjs/src/internal/util/subscribeToPromise.ts","../../../node_modules/rxjs/src/internal/InnerSubscriber.ts","../../../node_modules/rxjs/src/internal/OuterSubscriber.ts","../../../node_modules/rxjs/src/internal/operators/map.ts","../../../node_modules/rxjs/src/internal/util/TimeoutError.ts","../../../node_modules/rxjs/src/internal/util/EmptyError.ts","../../../node_modules/rxjs/src/internal/util/ArgumentOutOfRangeError.ts","../../../node_modules/rxjs/src/internal/scheduler/VirtualTimeScheduler.ts","../../../node_modules/rxjs/src/internal/scheduler/animationFrame.ts","../../../node_modules/rxjs/src/internal/scheduler/AnimationFrameScheduler.ts","../../../node_modules/rxjs/src/internal/scheduler/AnimationFrameAction.ts","../../../node_modules/rxjs/src/internal/scheduler/async.ts","../../../node_modules/rxjs/src/internal/scheduler/asap.ts","../../../node_modules/rxjs/src/internal/scheduler/AsapScheduler.ts","../../../node_modules/rxjs/src/internal/scheduler/AsapAction.ts","../../../node_modules/rxjs/src/internal/util/Immediate.ts","../../../node_modules/rxjs/src/internal/AsyncSubject.ts","../../../node_modules/rxjs/src/internal/ReplaySubject.ts","../../../node_modules/rxjs/src/internal/operators/observeOn.ts","../../../node_modules/rxjs/src/internal/Notification.ts","../../../node_modules/rxjs/src/internal/observable/throwError.ts","../../../node_modules/rxjs/src/internal/observable/of.ts","../../../node_modules/rxjs/src/internal/observable/scalar.ts","../../../node_modules/rxjs/src/internal/observable/fromArray.ts","../../../node_modules/rxjs/src/internal/util/subscribeToArray.ts","../../../node_modules/rxjs/src/internal/util/isScheduler.ts","../../../node_modules/rxjs/src/internal/observable/empty.ts","../../../node_modules/rxjs/src/internal/scheduler/queue.ts","../../../node_modules/rxjs/src/internal/scheduler/QueueScheduler.ts","../../../node_modules/rxjs/src/internal/scheduler/AsyncScheduler.ts","../../../node_modules/rxjs/src/internal/Scheduler.ts","../../../node_modules/rxjs/src/internal/scheduler/QueueAction.ts","../../../node_modules/rxjs/src/internal/scheduler/AsyncAction.ts","../../../node_modules/rxjs/src/internal/scheduler/Action.ts","../../../node_modules/rxjs/src/internal/BehaviorSubject.ts","../../../node_modules/rxjs/src/internal/operators/groupBy.ts","../../../node_modules/rxjs/src/internal/observable/ConnectableObservable.ts","../../../node_modules/rxjs/src/internal/operators/refCount.ts","../../../node_modules/rxjs/src/internal/Subject.ts","../../../node_modules/rxjs/src/internal/SubjectSubscription.ts","../../../node_modules/rxjs/src/internal/util/ObjectUnsubscribedError.ts","../../../node_modules/rxjs/src/internal/Observable.ts","../../../node_modules/rxjs/src/internal/util/pipe.ts","../../../node_modules/rxjs/src/internal/util/toSubscriber.ts","../../../node_modules/rxjs/src/internal/Subscriber.ts","../../../node_modules/rxjs/src/internal/symbol/rxSubscriber.ts","../../../node_modules/rxjs/src/internal/Subscription.ts","../../../node_modules/rxjs/src/internal/util/UnsubscriptionError.ts","../../../node_modules/rxjs/src/internal/util/tryCatch.ts","../../../node_modules/rxjs/src/internal/util/isObject.ts","../../../node_modules/rxjs/src/internal/Observer.ts","../../../node_modules/rxjs/src/internal/util/hostReportError.ts","../../../node_modules/rxjs/src/internal/config.ts","../../../node_modules/rxjs/src/internal/util/isFunction.ts","../../../node_modules/rxjs/node_modules/tslib/tslib.es6.js","~/ngx-scrollspy/src/core/service.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\n\nexport {ScrollSpyParallaxOptions,ScrollSpyParallaxDirective} from './parallax.directive';\n\nimport { ScrollSpyParallaxDirective } from './parallax.directive';\nexport class  ScrollSpyParallaxModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [ ScrollSpyParallaxDirective ],\n  exports: [ ScrollSpyParallaxDirective ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ScrollSpyParallaxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollSpyParallaxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollSpyParallaxModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Directive,\n  Injectable,\n  Input,\n  ElementRef,\n  Renderer2,\n  OnInit,\n  AfterViewInit,\n  OnDestroy\n} from '@angular/core';\n\nimport { ScrollSpyService } from '../core/service';\n\nexport interface ScrollSpyParallaxOptions {\n  // (default: 'window')\n  spyId?: string;\n\n  // (default: false)\n  horizontal?: boolean;\n\n  // the css property (converted to camelCase) that you want changed along with the\n  // value you want to assign to the css key; you should use ParallaxCss if you're\n  // just defining one property without special values\n  cssKey?: string;\n\n  // this is used to define the css property you'd like to modify as you scroll\n  // default is backgroundPositionY\n  property?: string;\n\n  // ratio defining how fast, slow, or the direction of the changes on scrolling\n  ratio?: number;\n\n  // this is the initial value in pixels for the parallaxCss property you defined\n  // before or, if you didn't define one, it defaults to 0\n  initValue?: number;\n\n  // the upper constraint for the css transformation\n  max?: number;\n\n  // the lower constraint for the css transformation\n  min?: number;\n\n  // the unit (e.g. 'px', 'em', '%', 'vh', etc.)\n  unit?: string;\n\n  axis?: string;\n}\nexport class ScrollSpyParallaxDirective implements OnInit, AfterViewInit, OnDestroy {\npublic options: ScrollSpyParallaxOptions;\npublic scrollSpyParallaxDisabled: boolean;\npublic cssValue: string;\npublic isSpecialVal: boolean = false;\npublic defaultOptions: ScrollSpyParallaxOptions = {\n    spyId: 'window',\n    horizontal: false,\n    cssKey: 'backgroundPosition',\n    property: 'backgroundPositionY',\n    ratio: -.7,\n    initValue: 0,\n    unit: 'px',\n    axis: 'Y'\n  };\npublic scrollStream$: any;\npublic el: HTMLElement;\n/**\n * @param {?} renderer\n * @param {?} elRef\n * @param {?} scrollSpy\n */\nconstructor(\nprivate renderer: Renderer2,\nprivate elRef: ElementRef,\nprivate scrollSpy: ScrollSpyService\n  ) {\n    this.el = elRef.nativeElement;\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (!this.options) {\n      this.options = {};\n    }\n\n    this.options = Object.assign(this.defaultOptions, this.options);\n\n    if (this.scrollSpyParallaxDisabled === undefined) {\n      this.scrollSpyParallaxDisabled = false;\n    }\n\n    if (this.options.property.match(/backgroundPosition/i)) {\n      if (this.options.property.split('backgroundPosition')[1].toUpperCase() === 'X') {\n        this.options.axis = 'X';\n      }\n\n      this.options.property = 'backgroundPosition';\n    }\n\n    let /** @type {?} */ cssValArray: Array<string>;\n\n    cssValArray = this.options.property.split(':');\n    this.options.cssKey = cssValArray[0];\n    this.cssValue = cssValArray[1];\n\n    this.isSpecialVal = this.cssValue ? true : false;\n\n    if (!this.cssValue) {\n      this.cssValue = this.options.cssKey;\n    }\n\n    this.options.ratio = +this.options.ratio;\n    this.options.initValue = +this.options.initValue;\n\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    if (!!this.scrollSpy.getObservable(this.options.spyId)) {\n      this.scrollStream$ = this.scrollSpy.getObservable(this.options.spyId).subscribe((e: any) => {\n        if (!this.scrollSpyParallaxDisabled) {\n          this.evaluateScroll(e.target);\n        }\n      });\n    } else {\n      return console.warn('ScrollSpyParallax: No ScrollSpy observable for id \"' + this.options.spyId + '\"');\n    }\n  }\n/**\n * @param {?} target\n * @return {?}\n */\nevaluateScroll(target: any) {\n    let /** @type {?} */ currentScrollPosition: number;\n    if (typeof target.scrollTop !== 'undefined') {\n      currentScrollPosition = target.scrollTop;\n    } else if (typeof target.scrollingElement !== 'undefined') {\n      currentScrollPosition = target.scrollingElement.scrollTop;\n    } else if (typeof target.scrollY !== 'undefined') {\n      currentScrollPosition = target.scrollY;\n    } else if (typeof target.pageYOffset !== 'undefined') {\n      currentScrollPosition = target.pageYOffset;\n    } else if (target.parentWindow && target.parentWindow.pageYOffset) {\n      currentScrollPosition = target.parentWindow.pageYOffset;\n    }\n\n    let /** @type {?} */ result: string;\n    let /** @type {?} */ value: number;\n\n    value = currentScrollPosition * this.options.ratio + this.options.initValue;\n\n    if (this.options.max !== undefined && currentScrollPosition >= this.options.max) {\n      currentScrollPosition = this.options.max;\n    } else if (this.options.min !== undefined && currentScrollPosition <= this.options.min) {\n      currentScrollPosition = this.options.min;\n    }\n\n    // added after realizing original setup wasn't compatible in Firefox debugger;\n    if (this.options.cssKey === 'backgroundPosition') {\n      if (this.options.axis === 'X') {\n        result = value + this.options.unit + ' 0';\n      } else {\n        result = '0 ' + value + this.options.unit;\n      }\n    } else if (this.isSpecialVal) {\n      result = this.cssValue + '(' + value + this.options.unit + ')';\n    } else {\n      result = value + this.options.unit;\n    }\n\n    this.renderer.setStyle(this.el, this.options.cssKey, result);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.scrollStream$.unsubscribe();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n{ type: Directive, args: [{\n  selector: '[scrollSpyParallax]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ScrollSpyService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: Input, args: ['scrollSpyParallax', ] },],\n'scrollSpyParallaxDisabled': [{ type: Input },],\n};\n}\n\nfunction ScrollSpyParallaxDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollSpyParallaxDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollSpyParallaxDirective.ctorParameters;\n/** @type {?} */\nScrollSpyParallaxDirective.propDecorators;\n/** @type {?} */\nScrollSpyParallaxDirective.prototype.options;\n/** @type {?} */\nScrollSpyParallaxDirective.prototype.scrollSpyParallaxDisabled;\n/** @type {?} */\nScrollSpyParallaxDirective.prototype.cssValue;\n/** @type {?} */\nScrollSpyParallaxDirective.prototype.isSpecialVal;\n/** @type {?} */\nScrollSpyParallaxDirective.prototype.defaultOptions;\n/** @type {?} */\nScrollSpyParallaxDirective.prototype.scrollStream$;\n/** @type {?} */\nScrollSpyParallaxDirective.prototype.el;\n/** @type {?} */\nScrollSpyParallaxDirective.prototype.renderer;\n/** @type {?} */\nScrollSpyParallaxDirective.prototype.elRef;\n/** @type {?} */\nScrollSpyParallaxDirective.prototype.scrollSpy;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\n\nexport {ScrollSpyInfiniteOptions,ScrollSpyInfiniteDirective} from './infinite.directive';\n\nimport { ScrollSpyInfiniteDirective } from './infinite.directive';\nexport class  ScrollSpyInfiniteModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [ ScrollSpyInfiniteDirective ],\n  exports: [ ScrollSpyInfiniteDirective ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ScrollSpyInfiniteModule_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollSpyInfiniteModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollSpyInfiniteModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Directive,\n  Injectable,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n  AfterViewInit,\n  OnDestroy\n} from '@angular/core';\nimport { throttleTime } from 'rxjs/operators';\n\nimport { ScrollSpyService } from '../core/service';\n\nexport interface ScrollSpyInfiniteOptions {\n  spyId?: string;\n  distanceRatio?: number;\n}\nexport class ScrollSpyInfiniteDirective implements OnInit, AfterViewInit, OnDestroy {\npublic options: ScrollSpyInfiniteOptions;\npublic scrollSpyInfiniteDisabled: boolean;\npublic scrollSpyInfiniteEvent: EventEmitter<any> = new EventEmitter();\npublic defaultOptions: ScrollSpyInfiniteOptions = {\n    spyId: 'window',\n    distanceRatio: 1\n  };\npublic scrollStream$: any;\n/**\n * @param {?} scrollSpy\n */\nconstructor(\nprivate scrollSpy: ScrollSpyService\n  ) {}\n/**\n * @return {?}\n */\nngOnInit() {\n    if (!this.options) {\n      this.options = {};\n    }\n\n    this.options = Object.assign(this.defaultOptions, this.options);\n\n    if (this.scrollSpyInfiniteDisabled === undefined) {\n      this.scrollSpyInfiniteDisabled = false;\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    if (!!this.scrollSpy.getObservable(this.options.spyId)) {\n      this.scrollStream$ = this.scrollSpy.getObservable(this.options.spyId).pipe(throttleTime(200)).subscribe((e: any) => {\n        if (!this.scrollSpyInfiniteDisabled) {\n          this.evaluateScroll(e.target);\n        }\n      });\n    } else {\n      return console.warn('ScrollSpyInfinite: No ScrollSpy observable for id \"' + this.options.spyId + '\"');\n    }\n  }\n/**\n * @param {?} target\n * @return {?}\n */\nevaluateScroll(target: any) {\n    if (this.options.spyId === 'window') {\n      const /** @type {?} */ scrollHeight = target.document.documentElement.scrollHeight;\n      const /** @type {?} */ scrollTop = target.pageYOffset || target.parentWindow.pageYOffset;\n      const /** @type {?} */ offsetHeight = target.document.documentElement.clientHeight;\n\n      if (scrollHeight - scrollTop - offsetHeight <= offsetHeight * this.options.distanceRatio) {\n        this.scrollSpyInfiniteEvent.next({});\n      }\n    } else {\n      const /** @type {?} */ scrollHeight = target.scrollingElement ?\n        target.scrollingElement.scrollHeight\n        : target.scrollHeight;\n\n      const /** @type {?} */ scrollTop = target.scrollingElement ?\n        target.scrollingElement.scrollTop\n        : target.scrollTop;\n\n      const /** @type {?} */ offsetHeight = target.scrollingElement ?\n        target.scrollingElement.offsetHeight\n        : target.offsetHeight;\n\n      if (scrollHeight - scrollTop - offsetHeight <= offsetHeight * this.options.distanceRatio) {\n        this.scrollSpyInfiniteEvent.next({});\n      }\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.scrollStream$.unsubscribe();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n{ type: Directive, args: [{\n  selector: '[scrollSpyInfinite]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollSpyService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: Input, args: ['scrollSpyInfinite', ] },],\n'scrollSpyInfiniteDisabled': [{ type: Input },],\n'scrollSpyInfiniteEvent': [{ type: Output },],\n};\n}\n\nfunction ScrollSpyInfiniteDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollSpyInfiniteDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollSpyInfiniteDirective.ctorParameters;\n/** @type {?} */\nScrollSpyInfiniteDirective.propDecorators;\n/** @type {?} */\nScrollSpyInfiniteDirective.prototype.options;\n/** @type {?} */\nScrollSpyInfiniteDirective.prototype.scrollSpyInfiniteDisabled;\n/** @type {?} */\nScrollSpyInfiniteDirective.prototype.scrollSpyInfiniteEvent;\n/** @type {?} */\nScrollSpyInfiniteDirective.prototype.defaultOptions;\n/** @type {?} */\nScrollSpyInfiniteDirective.prototype.scrollStream$;\n/** @type {?} */\nScrollSpyInfiniteDirective.prototype.scrollSpy;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ObservableInput, OperatorFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function withLatestFrom<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function withLatestFrom<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * ![](withLatestFrom.png)\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * ## Example\n * On every click event, emit an array with the latest timer event plus the click event\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const timer = interval(1000);\n * const result = clicks.pipe(withLatestFrom(timer));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.pipe(withLatestFrom(b, c), map(([a1, b1, c1]) => a1 + b1 + c1))`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    let project: any;\n    if (typeof args[args.length - 1] === 'function') {\n      project = args.pop();\n    }\n    const observables = <Observable<any>[]>args;\n    return source.lift(new WithLatestFromOperator(observables, project));\n  };\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../types';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowWhen.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * ## Example\n * Emit only the first two clicks events in every window of [1-5] random seconds\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowWhen(() => interval(1000 + Math.random() * 4000)),\n *   map(win => win.pipe(take(2))),     // each window has at most 2 emissions\n *   mergeAll(),                        // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowWhenOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator<T>(closingSelector));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../types';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowToggle.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * ## Example\n * Every other second, emit the click events from the next 500ms\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const openings = interval(1000);\n * const result = clicks.pipe(\n *   windowToggle(openings, i => i % 2 ? interval(500) : empty()),\n *   mergeAll(),\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return (source: Observable<T>) => source.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings as any));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context as any);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction, SchedulerLike, SchedulerAction } from '../types';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowTime.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * ## Examples\n * In every window of 1 second each, emit at most 2 click events\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowTime(1000),\n *   map(win => win.take(2)),   // each window has at most 2 emissions\n *   mergeAll(),                // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Every 5 seconds start a window 1 second long, and emit at most 2 click events per window\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowTime(1000, 5000),\n *   map(win => win.take(2)),   // each window has at most 2 emissions\n *   mergeAll(),                // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Same as example above but with maxWindowCount instead of take\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowTime(1000, 5000, 2), // each window has still at most 2 emissions\n *   mergeAll(),                // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {SchedulerLike} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              scheduler?: SchedulerLike): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: SchedulerLike): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: SchedulerLike): OperatorFunction<T, Observable<T>>;\n\nexport function windowTime<T>(windowTimeSpan: number): OperatorFunction<T, Observable<T>> {\n  let scheduler: SchedulerLike = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return function windowTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n  };\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: SchedulerLike;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: CountedSubject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: SchedulerAction<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: CountedSubject<T>;\n  context: CloseWindowContext<T>;\n}\n\nclass CountedSubject<T> extends Subject<T> {\n  private _numberOfNextedValues: number = 0;\n\n  next(value?: T): void {\n    this._numberOfNextedValues++;\n    super.next(value);\n  }\n\n  get numberOfNextedValues(): number {\n    return this._numberOfNextedValues;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: CountedSubject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: SchedulerLike) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule<CloseState<T>>(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule<CreationState<T>>(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule<TimeSpanOnlyState<T>>(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n        if (window.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window);\n        }\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): CountedSubject<T> {\n    const window = new CountedSubject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: CountedSubject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: SchedulerAction<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: SchedulerAction<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule<CloseState<T>>(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../types';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowCount.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * ## Examples\n * Ignore every 3rd click event, starting from the first one\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowCount(3)),\n *   map(win => win.skip(1)), // skip first of every 3 clicks\n *   mergeAll(),              // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Ignore every 3rd click event, starting from the third one\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowCount(2, 3),\n *   mergeAll(),              // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  return function windowCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n  };\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\nimport { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { Operator } from '../Operator';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * ![](window.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * ## Example\n * In every window of 1 second each, emit at most 2 click events\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const interval = interval(1000);\n * const result = clicks.pipe(\n *   window(interval),\n *   map(win => win.take(2)), // each window has at most 2 emissions\n *   mergeAll(),              // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ObservableInput, OperatorFunction, MonoTypeOperatorFunction, SchedulerAction, SchedulerLike, TeardownLogic } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T, R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: SchedulerLike): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * ![](timeoutWith.png)\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * ## Example\n * Add fallback observable\n * ```javascript\n * const seconds = interval(1000);\n * const minutes = interval(60 * 1000);\n *\n * seconds.pipe(timeoutWith(900, minutes))\n *   .subscribe(\n *     value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                  // since first value of `seconds` will not arrive fast enough.\n *     err => console.log(err),     // Would be called after 900ms in case of `timeout`,\n *                                  // but here will never be called.\n *   );\n * ```\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {SchedulerLike} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: SchedulerLike = async): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => {\n    let absoluteTimeout = isDate(due);\n    let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private action: SchedulerAction<TimeoutWithSubscriber<T, R>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: SchedulerLike) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T, R>(subscriber: TimeoutWithSubscriber<T, R>): void {\n    const { withObservable } = subscriber;\n    (<any> subscriber)._unsubscribeAndRecycle();\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<SchedulerAction<TimeoutWithSubscriber<T, R>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<SchedulerAction<TimeoutWithSubscriber<T, R>>> this.scheduler.schedule<TimeoutWithSubscriber<T, R>>(\n        TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { ThrottleConfig, defaultThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * ![](throttleTime.png)\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link SchedulerLike} for managing timers.\n *\n * ## Example\n * Emit clicks at a rate of at most one click per second\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(throttleTime(1000));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the throttling.\n * @param {Object} config a configuration object to define `leading` and\n * `trailing` behavior. Defaults to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number,\n                                scheduler: SchedulerLike = async,\n                                config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: SchedulerLike,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n  private _hasTrailingValue: boolean = false;\n  private _trailingValue: T = null;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: SchedulerLike,\n              private leading: boolean,\n              private trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule<DispatchArg<T>>(dispatchNext, this.duration, { subscriber: this }));\n      if (this.leading) {\n        this.destination.next(value);\n      }\n    }\n  }\n\n  protected _complete() {\n    if (this._hasTrailingValue) {\n      this.destination.next(this._trailingValue);\n      this.destination.complete();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction, SubscribableOrPromise, TeardownLogic } from '../types';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * ![](throttle.png)\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * ## Example\n * Emit clicks at a rate of at most one click per second\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(throttle(ev => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<any>,\n                            config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private _throttled: Subscription;\n  private _sendValue: T;\n  private _hasValue = false;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private _leading: boolean,\n              private _trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this._hasValue = true;\n    this._sendValue = value;\n\n    if (!this._throttled) {\n      if (this._leading) {\n        this.send();\n      } else {\n        this.throttle(value);\n      }\n    }\n  }\n\n  private send() {\n    const { _hasValue, _sendValue } = this;\n    if (_hasValue) {\n      this.destination.next(_sendValue);\n      this.throttle(_sendValue);\n    }\n    this._hasValue = false;\n    this._sendValue = null;\n  }\n\n  private throttle(value: T): void {\n    const duration = this.tryDurationSelector(value);\n    if (duration) {\n      this.add(this._throttled = subscribeToResult(this, duration));\n    }\n  }\n\n  private tryDurationSelector(value: T): SubscribableOrPromise<any> {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  private throttlingDone() {\n    const { _throttled, _trailing } = this;\n    if (_throttled) {\n      _throttled.unsubscribe();\n    }\n    this._throttled = null;\n\n    if (_trailing) {\n      this.send();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.throttlingDone();\n  }\n\n  notifyComplete(): void {\n    this.throttlingDone();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * ![](takeWhile.png)\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * ## Example\n * Emit click events only while the clientX property is greater than 200\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(takeWhile(ev => ev.clientX > 200));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits a value. Then, it completes.</span>\n *\n * ![](takeUntil.png)\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes. If the `notifier` doesn't emit any value and completes\n * then `takeUntil` will pass all values.\n *\n * ## Example\n * Tick every second until the first click happens\n * ```javascript\n * const interval = interval(1000);\n * const clicks = fromEvent(document, 'click');\n * const result = interval.pipe(takeUntil(clicks));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\n    const notifierSubscription = subscribeToResult(takeUntilSubscriber, this.notifier);\n    if (notifierSubscription && !notifierSubscription.closed) {\n      takeUntilSubscriber.add(notifierSubscription);\n      return source.subscribe(takeUntilSubscriber);\n    }\n    return takeUntilSubscriber;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>, ) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ObservableInput, OperatorFunction } from '../types';\nimport { map } from './map';\nimport { from } from '../observable/from';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\n/** @deprecated resultSelector is no longer supported, use inner map instead */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, resultSelector: undefined): OperatorFunction<T, R>;\n/** @deprecated resultSelector is no longer supported, use inner map instead */\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables.</span>\n *\n * ![](switchMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * ## Example\n * Rerun an interval Observable on every click event\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(switchMap((ev) => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchAll}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n): OperatorFunction<T, I|R> {\n  if (typeof resultSelector === 'function') {\n    return (source: Observable<T>) => source.pipe(\n      switchMap((a, i) => from(project(a, i)).pipe(\n        map((b, ii) => resultSelector(a, b, i, ii))\n      ))\n    );\n  }\n  return (source: Observable<T>) => source.lift(new SwitchMapOperator(project));\n}\n\nclass SwitchMapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<R>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<R>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n      this.destination.next(innerValue);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\nimport { MonoTypeOperatorFunction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified {@link SchedulerLike}.\n *\n * ![](subscribeOn.png)\n *\n * @param {SchedulerLike} scheduler - The {@link SchedulerLike} to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified {@link SchedulerLike}.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(scheduler: SchedulerLike, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function subscribeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new SubscribeOnOperator<T>(scheduler, delay));\n  };\n}\n\nclass SubscribeOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: SchedulerLike,\n              private delay: number) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return new SubscribeOnObservable<T>(\n      source, this.delay, this.scheduler\n    ).subscribe(subscriber);\n  }\n}\n","import { SchedulerLike, SchedulerAction } from '../types';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  /** @nocollapse */\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: SchedulerLike = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  /** @nocollapse */\n  static dispatch<T>(this: SchedulerAction<T>, arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return this.add(source.subscribe(subscriber));\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: SchedulerLike = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule<DispatchArg<any>>(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * ![](skipWhile.png)\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, TeardownLogic, ObservableInput } from '../types';\nimport { Subscription } from '../Subscription';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * ![](skipUntil.png)\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(destination: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>, notifier: ObservableInput<any>) {\n    super(destination);\n    this.add(this.innerSubscription = subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n    if (this.innerSubscription) {\n      this.innerSubscription.unsubscribe();\n    }\n  }\n\n  notifyComplete() {\n    /* do nothing */\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * ![](skipLast.png)\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * ## Example\n * Skip the last 2 values of an Observable with many values\n * ```javascript\n * const many = range(1, 5);\n * const skipLastTwo = many.pipe(skipLast(2));\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n * ```\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipLastOperator(count));\n}\n\nclass SkipLastOperator<T> implements Operator<T, T> {\n  constructor(private _skipCount: number) {\n    if (this._skipCount < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    if (this._skipCount === 0) {\n      // If we don't want to skip any values then just subscribe\n      // to Subscriber without any further logic.\n      return source.subscribe(new Subscriber(subscriber));\n    } else {\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipLastSubscriber<T> extends Subscriber<T> {\n  private _ring: T[];\n  private _count: number = 0;\n\n  constructor(destination: Subscriber<T>, private _skipCount: number) {\n    super(destination);\n    this._ring = new Array<T>(_skipCount);\n  }\n\n  protected _next(value: T): void {\n    const skipCount = this._skipCount;\n    const count = this._count++;\n\n    if (count < skipCount) {\n      this._ring[count] = value;\n    } else {\n      const currentIndex = count % skipCount;\n      const ring = this._ring;\n      const oldValue = ring[currentIndex];\n\n      ring[currentIndex] = value;\n      this.destination.next(oldValue);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * ![](skip.png)\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\nimport { Observer, MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * items, notify of an IllegalArgumentException or NoSuchElementException respectively. If the source Observable\n * emits items but none match the specified predicate then `undefined` is emiited.\n *\n * ![](single.png)\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate or `undefined` when no items match.\n *\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SingleOperator(predicate, source));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { Observer, OperatorFunction } from '../types';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * ![](sequenceEqual.png)\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * ## Example\n * figure out if the Konami code matches\n * ```javascript\n * const codes = from([\n *   'ArrowUp',\n *   'ArrowUp',\n *   'ArrowDown',\n *   'ArrowDown',\n *   'ArrowLeft',\n *   'ArrowRight',\n *   'ArrowLeft',\n *   'ArrowRight',\n *   'KeyB',\n *   'KeyA',\n *   'Enter', // no start key, clearly.\n * ]);\n *\n * const keys = fromEvent(document, 'keyup').pipe(map(e => e.code));\n * const matches = keys.pipe(\n *   bufferCount(11, 1),\n *   mergeMap(\n *     last11 => from(last11).pipe(sequenceEqual(codes)),\n *   ),\n * );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n * ```\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction, SchedulerAction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * ![](sampleTime.png)\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * ## Example\n * Every second, emit the most recent click at most once\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(sampleTime(1000));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: SchedulerLike = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: SchedulerLike) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: SchedulerAction<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * ![](sample.png)\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * ## Example\n * On every click, sample the most recent \"seconds\" timer\n * ```javascript\n * const seconds = interval(1000);\n * const clicks = fromEvent(document, 'click');\n * const result = seconds.pipe(sample(clicks));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * ![](retryWhen.png)\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { _unsubscribe } = this;\n\n    this._unsubscribe = null;\n    this._unsubscribeAndRecycle();\n    this._unsubscribe = _unsubscribe;\n\n    this.source.subscribe(this);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * ![](retry.png)\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryOperator(count, source));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * ![](repeatWhen.png)\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      }\n      if (!this.retriesSubscription || this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _unsubscribe } = this;\n\n    this._unsubscribe = null;\n    super._unsubscribeAndRecycle();\n    this._unsubscribe = _unsubscribe;\n\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { empty } from '../observable/empty';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * ![](repeat.png)\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return empty();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../types';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * ![](pairwise.png)\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * ## Example\n * On every click (starting from the second), emit the relative distance to the previous click\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const pairs = clicks.pipe(pairwise());\n * const distance = pairs.pipe(\n *   map(pair => {\n *     const x0 = pair[0].clientX;\n *     const y0 = pair[0].clientY;\n *     const x1 = pair[1].clientX;\n *     const y1 = pair[1].clientY;\n *     return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n *   }),\n * );\n * distance.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return (source: Observable<T>) => source.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","import { Observable } from '../Observable';\nimport { from } from '../observable/from';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ObservableInput, OperatorFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(v: ObservableInput<R>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, R> ;\nexport function onErrorResumeNext<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * ![](onErrorResumeNext.png)\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link Observable#subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catchError} instead.\n *\n *\n * ## Example\n * Subscribe to the next Observable after map fails\n * ```javascript\n * of(1, 2, 3, 0).pipe(\n *   map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   }),\n *   onErrorResumeNext(of(1, 2, 3)),\n * )\n * .subscribe(\n *   val => console.log(val),\n *   err => console.log(err),          // Will never be called.\n *   () => console.log('that\\'s it!')\n * );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n * ```\n *\n * @see {@link concat}\n * @see {@link catchError}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return (source: Observable<T>) => source.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return from(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<R>>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * ![](multicast.png)\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): OperatorFunction<T, R> {\n  return function multicastOperatorFunction(source: Observable<T>): Observable<R> {\n    let subjectFactory: () => Subject<T>;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return <Subject<T>>subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    const connectable: any = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n\n    return <ConnectableObservable<R>> connectable;\n  };\n}\n\nexport class MulticastOperator<T, R> implements Operator<T, R> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<R>) {\n  }\n  call(subscriber: Subscriber<R>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { ObservableInput, OperatorFunction } from '../types';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * ## Example\n * Count the number of click events\n * ```javascript\n * const click$ = fromEvent(document, 'click');\n * const one$ = click$.pipe(mapTo(1));\n * const seed = 0;\n * const count$ = one$.pipe(\n *   mergeScan((acc, one) => of(acc + one), seed),\n * );\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n * ```\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(accumulator: (acc: R, value: T) => ObservableInput<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => ObservableInput<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => ObservableInput<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function scan<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): OperatorFunction<T, T[]>;\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * ![](scan.png)\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * ## Example\n * Count the number of click events\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const ones = clicks.pipe(mapTo(1));\n * const seed = 0;\n * const count = ones.pipe(scan((acc, one) => acc + one, seed));\n * count.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): OperatorFunction<T, R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source: Observable<T>): Observable<R> {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../types';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * ![](materialize.png)\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * ## Example\n * Convert a faulty Observable to an Observable of Notifications\n * ```javascript\n * const letters = of('a', 'b', 13, 'd');\n * const upperCase = letters.pipe(map(x => x.toUpperCase()));\n * const materialized = upperCase.pipe(materialize());\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n * ```\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): OperatorFunction<T, Notification<T>> {\n  return function materializeOperatorFunction(source: Observable<T>) {\n    return source.lift(new MaterializeOperator());\n  };\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * ![](mapTo.png)\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * ## Example\n * Map every click to the string 'Hi'\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const greetings = clicks.pipe(mapTo('Hi'));\n * greetings.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * ![](takeLast.png)\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * ## Example\n * Take the last 3 values of an Observable with many values\n * ```javascript\n * const many = range(1, 100);\n * const lastThree = many.pipe(takeLast(3));\n * lastThree.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return empty();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n\nexport function isEmpty<T>(): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../types';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * ![](ignoreElements.png)\n *\n * ## Examples\n * ### Ignores emitted values, reacts to observable's completion.\n * ```javascript\n * of('you', 'talking', 'to', 'me').pipe(\n *   ignoreElements(),\n * )\n * .subscribe(\n *   word => console.log(word),\n *   err => console.log('error:', err),\n *   () => console.log('the end'),\n * );\n * // result:\n * // 'the end'\n * ```\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements(): OperatorFunction<any, never> {\n  return function ignoreElementsOperatorFunction(source: Observable<any>) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    // Do nothing\n  }\n}\n","import {Observable} from '../Observable';\nimport {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {OperatorFunction, MonoTypeOperatorFunction} from '../types';\n\nexport function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\nexport function find<T>(predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * ![](find.png)\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * ## Example\n * Find and emit the first click that happens on a DIV element\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(find(ev => ev.target.tagName === 'DIV'));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const {predicate, thisArg} = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, OperatorFunction, ObservableInput, SchedulerLike } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function expand<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, R>;\nexport function expand<T>(project: (value: T, index: number) => ObservableInput<T>, concurrent?: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * ![](expand.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * ## Example\n * Start emitting the powers of two on every click, at most 10 of them\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const powersOfTwo = clicks.pipe(\n *   mapTo(1),\n *   expand(x => of(2 * x).pipe(delay(1000))),\n *   take(10),\n * );\n * powersOfTwo.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => ObservableInput<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: SchedulerLike = undefined): OperatorFunction<T, R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return (source: Observable<T>) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number,\n              private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: ObservableInput<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number,\n              private scheduler: SchedulerLike) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule<DispatchArg<T, R>>(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ObservableInput, OperatorFunction } from '../types';\nimport { map } from './map';\nimport { from } from '../observable/from';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\n/** @deprecated resultSelector is no longer supported. Use inner map instead. */\nexport function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, resultSelector: undefined): OperatorFunction<T, R>;\n/** @deprecated resultSelector is no longer supported. Use inner map instead. */\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * ![](exhaustMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * ## Example\n * Run a finite timer for each click, only if there is no currently active timer\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   exhaustMap((ev) => interval(1000).pipe(take(5))),\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n): OperatorFunction<T, I|R> {\n  if (resultSelector) {\n    // DEPRECATED PATH\n    return (source: Observable<T>) => source.pipe(\n      exhaustMap((a, i) => from(project(a, i)).pipe(\n        map((b, ii) => resultSelector(a, b, i, ii)),\n      )),\n    );\n  }\n  return (source: Observable<T>) =>\n    source.lift(new ExhauseMapOperator(project));\n}\n\nclass ExhauseMapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ExhaustMapSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasSubscription = false;\n  private hasCompleted = false;\n  private index = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ObservableInput, OperatorFunction, TeardownLogic } from '../types';\n\nexport function exhaust<T>(): OperatorFunction<ObservableInput<T>, T>;\nexport function exhaust<R>(): OperatorFunction<any, R>;\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * ![](exhaust.png)\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * ## Example\n * Run a finite timer for each click, only if there is no currently active timer\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map((ev) => interval(1000).pipe(take(5))),\n * );\n * const result = higherOrder.pipe(exhaust());\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): OperatorFunction<any, T> {\n  return (source: Observable<T>) => source.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Observer, OperatorFunction } from '../types';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * ## Example\n * A simple example emitting true if all elements are less than 5, false otherwise\n * ```javascript\n *  of(1, 2, 3, 4, 5, 6).pipe(\n *     every(x => x < 5),\n * )\n * .subscribe(x => console.log(x)); // -> false\n * ```\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * ![](take.png)\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * ## Example\n * Take the first 5 seconds of an infinite 1-second interval Observable\n * ```javascript\n * const interval = interval(1000);\n * const five = interval.pipe(take(5));\n * five.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return empty();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, PartialObserver, TeardownLogic } from '../types';\nimport { noop } from '../util/noop';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\nexport function tap<T>(next?: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * ![](do.png)\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `tap` is not subscribed, the side effects specified by the\n * Observer will never happen. `tap` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * ## Example\n * Map every click to the clientX position of that click, while also logging the click event\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const positions = clicks.pipe(\n *   tap(ev => console.log(ev)),\n *   map(ev => ev.clientX),\n * );\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link map}\n * @see {@link Observable#subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\nclass TapSubscriber<T> extends Subscriber<T> {\n  private _context: any;\n\n  private _tapNext: ((value: T) => void) = noop;\n\n  private _tapError: ((err: any) => void) = noop;\n\n  private _tapComplete: (() => void) = noop;\n\n  constructor(destination: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n      super(destination);\n      this._tapError = error || noop;\n      this._tapComplete = complete || noop;\n      if (isFunction(observerOrNext)) {\n        this._context = this;\n        this._tapNext = observerOrNext;\n      } else if (observerOrNext) {\n        this._context = observerOrNext;\n        this._tapNext = observerOrNext.next || noop;\n        this._tapError = observerOrNext.error || noop;\n        this._tapComplete = observerOrNext.complete || noop;\n      }\n    }\n\n  _next(value: T) {\n    try {\n      this._tapNext.call(this._context, value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(value);\n  }\n\n  _error(err: any) {\n    try {\n      this._tapError.call(this._context, err);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.error(err);\n  }\n\n  _complete() {\n    try {\n      this._tapComplete.call(this._context, );\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    return this.destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction, MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * ![](filter.png)\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * ## Example\n * Emit only click events whose target was a DIV element\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const clicksOnDivs = clicks.pipe(filter(ev => ev.target.tagName === 'DIV'));\n * clicksOnDivs.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * ## Example\n * A simple example with numbers\n * ```javascript\n * of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4).pipe(\n *     distinctUntilChanged(),\n *   )\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n * ```\n *\n * An example using a compare function\n * ```typescript\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'},\n *   ).pipe(\n *     distinctUntilChanged((p: Person, q: Person) => p.name === q.name),\n *   )\n *   .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n * ```\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * ## Examples\n * A simple example with numbers\n * ```javascript\n * of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1).pipe(\n *     distinct(),\n *   )\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n * ```\n *\n * An example using a keySelector function\n * ```typescript\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *   ).pipe(\n *     distinct((p: Person) => p.name),\n *   )\n *   .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * ```\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../types';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * ![](dematerialize.png)\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * ## Example\n * Convert an Observable of Notifications to an actual Observable\n * ```javascript\n * const notifA = new Notification('N', 'A');\n * const notifB = new Notification('N', 'B');\n * const notifE = new Notification('E', undefined,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * const materialized = of(notifA, notifB, notifE);\n * const upperCase = materialized.pipe(dematerialize());\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n * ```\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): OperatorFunction<Notification<T>, T> {\n  return function dematerializeOperatorFunction(source: Observable<Notification<T>>) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/* tslint:disable:max-line-length */\n/** @deprecated In future versions, empty notifiers will no longer re-emit the source value on the output observable. */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<never>, subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T>;\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>, subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * ![](delayWhen.png)\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n * The completion of the notifier triggering the emission of the source value\n * is deprecated behavior and will be removed in future versions.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * ## Example\n * Delay each click by a random amount of time, between 0 and 5 seconds\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const delayedClicks = clicks.pipe(\n *   delayWhen(event => interval(Math.random() * 5000)),\n * );\n * delayedClicks.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    return (source: Observable<T>) =>\n      new SubscriptionDelayObservable(source, subscriptionDelay)\n        .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return (source: Observable<T>) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    if (subscriptionIdx !== -1) {\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n    }\n\n    return subscription.outerValue;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      this.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(public source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, PartialObserver, SchedulerAction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * ![](delay.png)\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * ## Examples\n * Delay each click by one second\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const delayedClicks = clicks.pipe(delay(1000)); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n * ```\n *\n * Delay all clicks until a future date happens\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const date = new Date('March 15, 2050 12:00:00'); // in the future\n * const delayedClicks = clicks.pipe(delay(date)); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: SchedulerLike = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: SchedulerLike;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: SchedulerAction<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      this.unsubscribe();\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: SchedulerLike) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: SchedulerLike): void {\n    this.active = true;\n    this.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * ![](defaultIfEmpty.png)\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * ## Example\n * If no clicks happen in 5 seconds, then emit \"no clicks\"\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const clicksBeforeFive = clicks.pipe(takeUntil(interval(5000)));\n * const result = clicksBeforeFive.pipe(defaultIfEmpty('no clicks'));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * ![](debounceTime.png)\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link SchedulerLike} for\n * managing timers.\n *\n * ## Example\n * Emit the most recent click after a burst of clicks\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(debounceTime(1000));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: SchedulerLike = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: SchedulerLike) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      const { lastValue } = this;\n      // This must be done *before* passing the value\n      // along to the destination because it's possible for\n      // the value to synchronously re-enter this operator\n      // recursively when scheduled with things like\n      // VirtualScheduler/TestScheduler.\n      this.lastValue = null;\n      this.hasValue = false;\n      this.destination.next(lastValue);\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, SubscribableOrPromise, TeardownLogic } from '../types';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * ![](debounce.png)\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * ## Example\n * Emit the most recent click after a burst of clicks\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(debounce(() => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<any>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (subscription && !subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      // This must be done *before* passing the value\n      // along to the destination because it's possible for\n      // the value to synchronously re-enter this operator\n      // recursively if the duration selector Observable\n      // emits synchronously\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer, OperatorFunction } from '../types';\nimport { Subscriber } from '../Subscriber';\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * ![](count.png)\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * ## Examples\n *\n * Counts how many seconds have passed before the first click happened\n * ```javascript\n * const seconds = interval(1000);\n * const clicks = fromEvent(document, 'click');\n * const secondsBeforeClick = seconds.pipe(takeUntil(clicks));\n * const result = secondsBeforeClick.pipe(count());\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Counts how many odd numbers are there between 1 and 7\n * ```javascript\n * const numbers = range(1, 7);\n * const result = numbers.pipe(count(i => i % 2 === 1));\n * result.subscribe(x => console.log(x));\n * // Results in:\n * // 4\n * ```\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\n\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new CountOperator(predicate, source));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","import {Operator} from '../Operator';\nimport {Subscriber} from '../Subscriber';\nimport {Observable} from '../Observable';\n\nimport {OuterSubscriber} from '../OuterSubscriber';\nimport {subscribeToResult} from '../util/subscribeToResult';\nimport {ObservableInput, OperatorFunction, MonoTypeOperatorFunction} from '../types';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * ![](catch.png)\n *\n * ## Examples\n * Continues with a different Observable when there's an error\n *\n * ```javascript\n * of(1, 2, 3, 4, 5).pipe(\n *     map(n => {\n *   \t   if (n == 4) {\n * \t       throw 'four!';\n *       }\n *\t     return n;\n *     }),\n *     catchError(err => of('I', 'II', 'III', 'IV', 'V')),\n *   )\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n * ```\n *\n * Retries the caught source Observable again in case of error, similar to retry() operator\n *\n * ```javascript\n * of(1, 2, 3, 4, 5).pipe(\n *     map(n => {\n *   \t   if (n === 4) {\n *   \t     throw 'four!';\n *       }\n * \t     return n;\n *     }),\n *     catchError((err, caught) => caught),\n *     take(30),\n *   )\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n * ```\n *\n * Throws a new error when the source Observable throws an error\n *\n * ```javascript\n * of(1, 2, 3, 4, 5).pipe(\n *     map(n => {\n *       if (n == 4) {\n *         throw 'four!';\n *       }\n *       return n;\n *     }),\n *     catchError(err => {\n *       throw 'error in source. Details: ' + err;\n *     }),\n *   )\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n * ```\n *\n *  @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T>(selector: (err: any, caught: Observable<T>) => never): MonoTypeOperatorFunction<T>;\nexport function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R>;\nexport function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | R> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../types';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * ![](bufferWhen.png)\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * ## Example\n *\n * Emit an array of the last clicks every [1-5] random seconds\n *\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferWhen(() =>\n *   interval(1000 + Math.random() * 4000)\n * ));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]> {\n  return function (source: Observable<T>) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction, SubscribableOrPromise } from '../types';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * ![](bufferToggle.png)\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * ## Example\n *\n * Every other second, emit the click events from the next 500ms\n *\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const openings = interval(1000);\n * const buffered = clicks.pipe(bufferToggle(openings, i =>\n *   i % 2 ? interval(500) : empty()\n * ));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(\n  openings: SubscribableOrPromise<O>,\n  closingSelector: (value: O) => SubscribableOrPromise<any>\n): OperatorFunction<T, T[]> {\n  return function bufferToggleOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n  };\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction, SchedulerAction, SchedulerLike } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(bufferTimeSpan: number, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number | null | undefined, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number | null | undefined, maxBufferSize: number, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * ![](bufferTime.png)\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * ## Examples\n *\n * Every second, emit an array of the recent click events\n *\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferTime(1000));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * Every 5 seconds, emit the click events from the next 2 seconds\n *\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferTime(2000, 5000));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {SchedulerLike} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: SchedulerLike = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ninterface DispatchCreateArg<T> {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number;\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: SchedulerLike;\n}\n\ninterface DispatchCloseArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: SchedulerLike) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: DispatchCreateArg<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule<DispatchCloseArg<T>>(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule<DispatchCreateArg<T>>(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: SchedulerAction<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\nfunction dispatchBufferCreation<T>(this: SchedulerAction<DispatchCreateArg<T>>, state: DispatchCreateArg<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <SchedulerAction<DispatchCreateArg<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchCloseArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchCloseArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * ![](bufferCount.png)\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * ## Examples\n *\n * Emit the last two click events as an array\n *\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferCount(2));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * On every click, emit the last two click events as an array\n *\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferCount(2, 1));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> {\n  return function bufferCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n  };\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../types';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * ![](buffer.png)\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * ## Example\n *\n * On every click, emit array of most recent interval events\n *\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const interval = interval(1000);\n * const buffered = interval.pipe(buffer(clicks));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return function bufferOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferOperator<T>(closingNotifier));\n  };\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, SubscribableOrPromise, TeardownLogic } from '../types';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * ![](audit.png)\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * ## Example\n *\n * Emit clicks at a rate of at most one click per second\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(audit(ev => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return function auditOperatorFunction(source: Observable<T>) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        const innerSubscription = subscribeToResult(this, duration);\n        if (!innerSubscription || innerSubscription.closed) {\n          this.clearThrottle();\n        } else {\n          this.add(this.throttled = innerSubscription);\n        }\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nexport {ScrollSpyIndexService} from './index.service';\nexport {ScrollSpyIndexOptions,ScrollSpyIndexDirective} from './index.directive';\nexport {ScrollSpyIndexComponentOptions,ScrollSpyIndexRenderComponent} from './index.component';\n\nimport { ScrollSpyIndexDirective } from './index.directive';\nimport { ScrollSpyIndexRenderComponent } from './index.component';\nexport class ScrollSpyIndexModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [ CommonModule, RouterModule ],\n  declarations: [ ScrollSpyIndexDirective, ScrollSpyIndexRenderComponent ],\n  exports: [ ScrollSpyIndexDirective, ScrollSpyIndexRenderComponent ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ScrollSpyIndexModule_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollSpyIndexModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollSpyIndexModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ChangeDetectorRef,\n  Injectable,\n  Input,\n  ElementRef,\n  OnInit,\n  AfterViewInit,\n  OnDestroy,\n  ChangeDetectionStrategy\n} from '@angular/core';\n\nimport { ScrollSpyService } from '../core/service';\nimport { ScrollSpyIndexService } from './index.service';\n\nexport interface ScrollSpyIndexComponentOptions {\n  id?: string;\n  spyId?: string;\n  topMargin?: number;\n}\nexport class ScrollSpyIndexRenderComponent implements OnInit, AfterViewInit, OnDestroy {\npublic scrollSpyIndexRenderOptions: ScrollSpyIndexComponentOptions;\npublic currentScrollPosition: number;\npublic items: any[] = [];\npublic itemsHash: any = {};\npublic itemsToHighlight: Array<string> = [];\npublic defaultOptions: ScrollSpyIndexComponentOptions = {\n    spyId: 'window',\n    topMargin: 0\n  };\npublic changeStream$: any;\npublic scrollStream$: any;\npublic el: HTMLElement;\n/**\n * @param {?} ref\n * @param {?} elRef\n * @param {?} scrollSpy\n * @param {?} scrollSpyIndex\n */\nconstructor(\nprivate ref: ChangeDetectorRef,\nprivate elRef: ElementRef,\nprivate scrollSpy: ScrollSpyService,\nprivate scrollSpyIndex: ScrollSpyIndexService\n  ) {\n    this.el = elRef.nativeElement;\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (!this.scrollSpyIndexRenderOptions) {\n      this.scrollSpyIndexRenderOptions = {};\n    }\n\n    if (!this.scrollSpyIndexRenderOptions.id) {\n      return console.warn('ScrollSpyIndex: Missing id.');\n    }\n\n    this.scrollSpyIndexRenderOptions = Object.assign(this.defaultOptions, this.scrollSpyIndexRenderOptions);\n\n    this.changeStream$ = this.scrollSpyIndex.changes$.subscribe((e: any) => {\n      if (e.index === this.scrollSpyIndexRenderOptions.id) {\n        if (e.change === 'delete') {\n          this.update();\n        } else if (e.change === 'set') {\n          this.update();\n        }\n      }\n    });\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    if (!!this.scrollSpy.getObservable(this.scrollSpyIndexRenderOptions.spyId)) {\n      this.scrollStream$ = this.scrollSpy.getObservable(this.scrollSpyIndexRenderOptions.spyId).subscribe((e: any) => {\n        if (typeof e.target.scrollingElement !== 'undefined') {\n          this.currentScrollPosition = e.target.scrollingElement.scrollTop;\n        } else if (typeof e.target.scrollY !== 'undefined') {\n          this.currentScrollPosition = e.target.scrollY;\n        } else if (typeof e.target.pageYOffset !== 'undefined') {\n          this.currentScrollPosition = e.target.pageYOffset;\n        }\n        this.calculateHighlight();\n      });\n    } else {\n      return console.warn('ScrollSpyIndexComponent: No ScrollSpy observable for id \"' + this.scrollSpyIndexRenderOptions.spyId + '\"');\n    }\n  }\n/**\n * @return {?}\n */\nupdate() {\n    const /** @type {?} */ data: Array<any> = this.scrollSpyIndex.getIndex(this.scrollSpyIndexRenderOptions.id) || [];\n\n    let /** @type {?} */ stack: Array<any> = [];\n    let /** @type {?} */ parentStack: Array<any> = [];\n    let /** @type {?} */ lastItem: any;\n\n    this.items = [];\n    this.itemsHash = {};\n\n    for (var /** @type {?} */ i = 0; i < data.length; ++i) {\n      // parse basic info from the dom item\n      var /** @type {?} */ item: any = {\n        link: data[i].id,\n        text: data[i].textContent || data[i].innerText,\n        parents: [],\n        children: []\n      };\n\n      // build type identifier\n      var /** @type {?} */ level: string = data[i].tagName;\n      for (var /** @type {?} */ n = 0; n < data[i].classList.length; n++) {\n        level += ',' + data[i].classList[n];\n      }\n\n      // here be dragons\n      var /** @type {?} */ stacksize: number = stack.length;\n      if (stacksize === 0) {\n        // we are at the top level and will stay there\n        stack.push(level);\n      } else if (level !== stack[stacksize - 1]) {\n        // traverse the ancestry, looking for a match\n        for (var /** @type {?} */ j = stacksize - 1; j >= 0; j--) {\n          if (level === stack[j]) {\n            break; // found an ancestor\n          }\n        }\n        if (j < 0) {\n          // this is a new submenu item, lets push the stack\n          stack.push(level);\n          parentStack.push(lastItem);\n        } else {\n          // we are either a sibling or higher up the tree,\n          // lets pop the stack if needed\n          while (stack.length > j + 1) {\n            stack.pop();\n            parentStack.pop();\n          }\n        }\n      }\n\n      // for next iteration\n      lastItem = item.link;\n\n      // if we have a parent, lets record it\n      if (parentStack.length > 0) {\n        item.parents = [...parentStack];\n\n        let /** @type {?} */ temp: any = this.items;\n        for (var /** @type {?} */ t = 0; t < parentStack.length; ++t) {\n          if (t < parentStack.length - 1) {\n            temp = temp.filter((e: any) => { return e.link === parentStack[t]; })[0].children;\n          } else {\n            temp.filter((e: any) => { return e.link === parentStack[t]; })[0].children.push(item);\n          }\n        }\n      } else {\n        this.items.push(item);\n      }\n\n      this.itemsHash[item.link] = item;\n    }\n\n    setTimeout(() => {\n      this.calculateHighlight();\n    });\n  }\n/**\n * @return {?}\n */\ncalculateHighlight() {\n    var /** @type {?} */ items: Array<any> = this.scrollSpyIndex.getIndex(this.scrollSpyIndexRenderOptions.id);\n    this.itemsToHighlight = [];\n\n    if (!items || !items.length) {\n      return;\n    }\n\n    var /** @type {?} */ highlightItem: string;\n    for (var /** @type {?} */ i = items.length - 1; i >= 0; i--) {\n      if (this.currentScrollPosition - (items[i].offsetTop + this.scrollSpyIndexRenderOptions.topMargin) >= 0) {\n        highlightItem = items[i].id;\n        break;\n      }\n    }\n\n    if (!highlightItem) {\n      highlightItem = items[0].id;\n    }\n    this.itemsToHighlight = [highlightItem, ...this.itemsHash[highlightItem].parents];\n\n    this.ref.markForCheck();\n  }\n/**\n * @param {?} id\n * @return {?}\n */\nhighlight(id: string): boolean {\n    return this.itemsToHighlight.indexOf(id) !== -1;\n  }\n/**\n * @param {?} anchor\n * @return {?}\n */\ngoTo(anchor: string) {\n    setTimeout(() => {\n      document.querySelector('#' + anchor).scrollIntoView();\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.changeStream$.unsubscribe();\n    this.scrollStream$.unsubscribe();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n{ type: Component, args: [{\n  selector: 'scrollSpy-index-render',\n  template: `\n  <div #container>\n    <ul class=\"nav flex-column menu\">\n      <li *ngFor=\"let item of items\" [class.active]=\"highlight(item.link)\">\n        <a [routerLink]=\"\" fragment=\"{{item.link}}\" (click)=\"goTo(item.link)\">{{item.text}}</a>\n        <ul *ngIf=\"item.children.length\" class=\"nav menu\">\n          <li *ngFor=\"let itemChild of item.children\" [class.active]=\"highlight(itemChild.link)\">\n            <a [routerLink]=\"\" fragment=\"{{itemChild.link}}\" (click)=\"goTo(itemChild.link)\">{{itemChild.text}}</a>\n            <ul *ngIf=\"itemChild.children.length\" class=\"nav menu\">\n              <li *ngFor=\"let itemChild1 of itemChild.children\" [class.active]=\"highlight(itemChild1.link)\">\n                <a [routerLink]=\"\" fragment=\"{{itemChild1.link}}\" (click)=\"goTo(itemChild1.link)\">{{itemChild1.text}}</a>\n                 <ul *ngIf=\"itemChild1.children.length\" class=\"nav menu\">\n                  <li *ngFor=\"let itemChild2 of itemChild1.children\" [class.active]=\"highlight(itemChild2.link)\">\n                    <a [routerLink]=\"\" fragment=\"{{itemChild2.link}}\" (click)=\"goTo(itemChild2.link)\">{{itemChild2.text}}</a>\n                  </li>\n                </ul>\n              </li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n{type: ElementRef, },\n{type: ScrollSpyService, },\n{type: ScrollSpyIndexService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'scrollSpyIndexRenderOptions': [{ type: Input },],\n};\n}\n\nfunction ScrollSpyIndexRenderComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollSpyIndexRenderComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollSpyIndexRenderComponent.ctorParameters;\n/** @type {?} */\nScrollSpyIndexRenderComponent.propDecorators;\n/** @type {?} */\nScrollSpyIndexRenderComponent.prototype.scrollSpyIndexRenderOptions;\n/** @type {?} */\nScrollSpyIndexRenderComponent.prototype.currentScrollPosition;\n/** @type {?} */\nScrollSpyIndexRenderComponent.prototype.items;\n/** @type {?} */\nScrollSpyIndexRenderComponent.prototype.itemsHash;\n/** @type {?} */\nScrollSpyIndexRenderComponent.prototype.itemsToHighlight;\n/** @type {?} */\nScrollSpyIndexRenderComponent.prototype.defaultOptions;\n/** @type {?} */\nScrollSpyIndexRenderComponent.prototype.changeStream$;\n/** @type {?} */\nScrollSpyIndexRenderComponent.prototype.scrollStream$;\n/** @type {?} */\nScrollSpyIndexRenderComponent.prototype.el;\n/** @type {?} */\nScrollSpyIndexRenderComponent.prototype.ref;\n/** @type {?} */\nScrollSpyIndexRenderComponent.prototype.elRef;\n/** @type {?} */\nScrollSpyIndexRenderComponent.prototype.scrollSpy;\n/** @type {?} */\nScrollSpyIndexRenderComponent.prototype.scrollSpyIndex;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Directive,\n  Injectable,\n  ElementRef,\n  Input,\n  OnInit,\n  AfterViewInit,\n  OnDestroy\n} from '@angular/core';\n\nimport { ScrollSpyIndexService } from './index.service';\n\nexport interface ScrollSpyIndexOptions {\n  id?: string;\n  selector?: string;\n}\nexport class ScrollSpyIndexDirective implements OnInit, AfterViewInit, OnDestroy {\npublic options: ScrollSpyIndexOptions;\npublic defaultOptions: ScrollSpyIndexOptions = {\n    selector: 'anchor'\n  };\npublic el: HTMLElement;\n/**\n * @param {?} elRef\n * @param {?} scrollSpyIndex\n */\nconstructor(\nprivate elRef: ElementRef,\nprivate scrollSpyIndex: ScrollSpyIndexService\n  ) {\n    this.el = elRef.nativeElement;\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (!this.options) {\n      this.options = {};\n    }\n\n    if (!this.options.id) {\n      return console.warn('ScrollSpyIndex: Missing id.');\n    }\n\n    this.options = Object.assign(this.defaultOptions, this.options);\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this.scrollSpyIndex.setIndex(this.options.id, this.el.getElementsByClassName(this.options.selector));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.scrollSpyIndex.deleteIndex(this.options.id);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n{ type: Directive, args: [{\n  selector: '[scrollSpyIndex]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ScrollSpyIndexService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: Input, args: ['scrollSpyIndex', ] },],\n};\n}\n\nfunction ScrollSpyIndexDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollSpyIndexDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollSpyIndexDirective.ctorParameters;\n/** @type {?} */\nScrollSpyIndexDirective.propDecorators;\n/** @type {?} */\nScrollSpyIndexDirective.prototype.options;\n/** @type {?} */\nScrollSpyIndexDirective.prototype.defaultOptions;\n/** @type {?} */\nScrollSpyIndexDirective.prototype.el;\n/** @type {?} */\nScrollSpyIndexDirective.prototype.elRef;\n/** @type {?} */\nScrollSpyIndexDirective.prototype.scrollSpyIndex;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\n\nexport {ScrollSpyAffixOptions,ScrollSpyAffixDirective} from './affix.directive';\n\nimport { ScrollSpyAffixDirective } from './affix.directive';\nexport class ScrollSpyAffixModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [ ScrollSpyAffixDirective ],\n  exports: [ ScrollSpyAffixDirective ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ScrollSpyAffixModule_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollSpyAffixModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollSpyAffixModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Directive,\n  Injectable,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  OnDestroy,\n  ChangeDetectorRef\n} from '@angular/core';\n\nimport { ScrollSpyService } from '../core/service';\n\nexport interface ScrollSpyAffixOptions {\n  topMargin?: number;\n  bottomMargin?: number;\n}\nexport class ScrollSpyAffixDirective implements AfterViewInit, OnDestroy {\npublic options: ScrollSpyAffixOptions;\npublic elementTop: number;\npublic elementBottom: number;\npublic affix: boolean = false;\npublic affixTop: boolean = false;\npublic affixBottom: boolean = false;\npublic defaultOptions: ScrollSpyAffixOptions = {\n    topMargin: 0,\n    bottomMargin: 0\n  };\npublic scrollStream$: any;\npublic el: HTMLElement;\npublic parentEl: any;\n/**\n * @param {?} ref\n * @param {?} elRef\n * @param {?} scrollSpy\n */\nconstructor(\nprivate ref: ChangeDetectorRef,\nprivate elRef: ElementRef,\nprivate scrollSpy: ScrollSpyService\n  ) {\n    this.el = elRef.nativeElement;\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    if (!this.options) {\n      this.options = {};\n    }\n\n    this.options = Object.assign(this.defaultOptions, this.options);\n\n    this.parentEl = this.el.parentElement;\n    this.elementTop = this.parentEl.scrollTop;\n    this.elementBottom = this.elementTop + this.parentEl.getBoundingClientRect().height;\n\n    if (!!this.scrollSpy.getObservable('window')) {\n      // TODO: Remove setTimeout once: https://github.com/angular/angular/issues/7443\n      this.scrollStream$ = this.scrollSpy.getObservable('window').subscribe((e: any) => {\n        if (typeof e.target.scrollingElement !== 'undefined') {\n          setTimeout(() => this.update(e.target.scrollingElement.scrollTop));\n        } else if (typeof e.target.scrollY !== 'undefined') {\n          setTimeout(() => this.update(e.target.scrollY));\n        } else if (typeof e.target.pageYOffset !== 'undefined') {\n          setTimeout(() => this.update(e.target.pageYOffset));\n        } else if(e.target.parentWindow && e.target.parentWindow.pageYOffset) {\n          setTimeout(() => this.update(e.target.parentWindow.pageYOffset));\n        }\n      });\n    }\n  }\n/**\n * @param {?} currentTop\n * @return {?}\n */\nupdate(currentTop: number) {\n    if (currentTop >= this.elementTop + this.options.topMargin) {\n      if (currentTop > this.elementBottom - this.options.bottomMargin - this.el.getBoundingClientRect().height) {\n        if (this.affixTop || !this.affixBottom) {\n          this.ref.markForCheck();\n        }\n        this.affixTop = false;\n        this.affixBottom = true;\n        this.affix = true;\n      } else {\n        if (!this.affixTop || this.affixBottom) {\n          this.ref.markForCheck();\n        }\n        this.affixTop = true;\n        this.affixBottom = false;\n        this.affix = true;\n      }\n    } else {\n      if (this.affixTop) {\n        this.ref.markForCheck();\n      }\n      this.affixTop = false;\n      this.affixBottom = false;\n      this.affix = false;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.scrollStream$.unsubscribe();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n{ type: Directive, args: [{\n  selector: '[scrollSpyAffix]',\n  host: {\n    '[class.affix]': 'affix',\n    '[class.affix-top]': 'affixTop',\n    '[class.affix-bottom]': 'affixBottom'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n{type: ElementRef, },\n{type: ScrollSpyService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: Input, args: ['scrollSpyAffix', ] },],\n};\n}\n\nfunction ScrollSpyAffixDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollSpyAffixDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollSpyAffixDirective.ctorParameters;\n/** @type {?} */\nScrollSpyAffixDirective.propDecorators;\n/** @type {?} */\nScrollSpyAffixDirective.prototype.options;\n/** @type {?} */\nScrollSpyAffixDirective.prototype.elementTop;\n/** @type {?} */\nScrollSpyAffixDirective.prototype.elementBottom;\n/** @type {?} */\nScrollSpyAffixDirective.prototype.affix;\n/** @type {?} */\nScrollSpyAffixDirective.prototype.affixTop;\n/** @type {?} */\nScrollSpyAffixDirective.prototype.affixBottom;\n/** @type {?} */\nScrollSpyAffixDirective.prototype.defaultOptions;\n/** @type {?} */\nScrollSpyAffixDirective.prototype.scrollStream$;\n/** @type {?} */\nScrollSpyAffixDirective.prototype.el;\n/** @type {?} */\nScrollSpyAffixDirective.prototype.parentEl;\n/** @type {?} */\nScrollSpyAffixDirective.prototype.ref;\n/** @type {?} */\nScrollSpyAffixDirective.prototype.elRef;\n/** @type {?} */\nScrollSpyAffixDirective.prototype.scrollSpy;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { ScrollSpyService } from './core/service';\nimport { ScrollSpyDirective } from './core/window.directive';\nimport { ScrollSpyElementDirective } from './core/element.directive';\n\nimport { ScrollSpyIndexService } from './plugin/index.service';\nexport class ScrollSpyModule {\nconstructor() {}\n/**\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: ScrollSpyModule,\n      providers: [\n        ScrollSpyService,\n        ScrollSpyIndexService\n      ]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [ ScrollSpyDirective, ScrollSpyElementDirective ],\n  exports: [ ScrollSpyDirective, ScrollSpyElementDirective ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ScrollSpyModule_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollSpyModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollSpyModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, EventEmitter } from '@angular/core';\nexport class ScrollSpyIndexService {\npublic changes$: EventEmitter<any> = new EventEmitter();\nprivate indexes: any = {};\n/**\n * @param {?} key\n * @return {?}\n */\npublic getIndex(key: string): any {\n    return this.indexes[key];\n  }\n/**\n * @param {?} key\n * @param {?} index\n * @return {?}\n */\npublic setIndex(key: string, index: any) {\n    this.indexes[key] = index;\n    this.indexes = this.indexes = Object.assign({}, this.indexes);\n    this.changes$.emit({ index: key, change: 'set' });\n  }\n/**\n * @param {?} key\n * @return {?}\n */\npublic deleteIndex(key: string) {\n    delete this.indexes[key];\n    this.indexes = Object.assign({}, this.indexes);\n    this.changes$.emit({ index: key, change: 'delete' });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ScrollSpyIndexService_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollSpyIndexService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollSpyIndexService.ctorParameters;\n/** @type {?} */\nScrollSpyIndexService.prototype.changes$;\n/** @type {?} */\nScrollSpyIndexService.prototype.indexes;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, Injectable, Input, OnInit, OnDestroy } from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\nimport { ScrollSpyService } from './service';\nexport class ScrollSpyElementDirective implements OnInit, OnDestroy {\npublic scrollSpyId: string;\nprivate scrollStream$: ReplaySubject<any> = new ReplaySubject(1);\n/**\n * @param {?} scrollSpy\n */\nconstructor(\nprivate scrollSpy: ScrollSpyService\n  ) {}\n/**\n * @return {?}\n */\nngOnInit() {\n    if (!this.scrollSpyId) {\n      return console.warn('ScrollSpy: Missing id.');\n    }\n\n    if (!!this.scrollSpy.getObservable(this.scrollSpyId)) {\n      console.warn('ScrollSpy: duplicate id \"' + this.scrollSpyId + '\". Instance will be skipped!');\n    } else {\n      this.scrollSpy.setObservable(this.scrollSpyId, this.scrollStream$);\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.scrollSpy.deleteObservable(this.scrollSpyId);\n  }\n/**\n * @param {?} $event\n * @return {?}\n */\nonScroll($event: any) {\n    this.scrollStream$.next($event);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n{ type: Directive, args: [{\n  selector: '[scrollSpyElement]',\n  host: {\n    '(scroll)': 'onScroll($event)'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollSpyService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'scrollSpyId': [{ type: Input, args: ['scrollSpyElement', ] },],\n};\n}\n\nfunction ScrollSpyElementDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollSpyElementDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollSpyElementDirective.ctorParameters;\n/** @type {?} */\nScrollSpyElementDirective.propDecorators;\n/** @type {?} */\nScrollSpyElementDirective.prototype.scrollSpyId;\n/** @type {?} */\nScrollSpyElementDirective.prototype.scrollStream$;\n/** @type {?} */\nScrollSpyElementDirective.prototype.scrollSpy;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, Injectable, OnInit } from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\nimport { ScrollSpyService } from './service';\nexport class ScrollSpyDirective implements OnInit {\nprivate scrollStream$: ReplaySubject<any> = new ReplaySubject(1);\n/**\n * @param {?} scrollSpy\n */\nconstructor(\nprivate scrollSpy: ScrollSpyService\n  ) {}\n/**\n * @return {?}\n */\nngOnInit() {\n    if (!!this.scrollSpy.getObservable('window')) {\n      console.warn('ScrollSpy: duplicate id \"window\". Instance will be skipped!');\n    } else {\n      this.scrollSpy.setObservable('window', this.scrollStream$);\n    }\n  }\n/**\n * @param {?} $event\n * @return {?}\n */\nonScroll($event: any) {\n    this.scrollStream$.next($event);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n{ type: Directive, args: [{\n  selector: '[scrollSpy]',\n  host: {\n    '(window:scroll)': 'onScroll($event)'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollSpyService, },\n];\n}\n\nfunction ScrollSpyDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollSpyDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollSpyDirective.ctorParameters;\n/** @type {?} */\nScrollSpyDirective.prototype.scrollStream$;\n/** @type {?} */\nScrollSpyDirective.prototype.scrollSpy;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Observable } from '../Observable';\nimport { fromArray } from './fromArray';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { ObservableInput, PartialObserver } from '../types';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../../internal/symbol/iterator';\n\n/* tslint:disable:max-line-length */\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, R>(v1: ObservableInput<T>, resultSelector: (v1: T) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, resultSelector: (v1: T, v2: T2) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, resultSelector: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zip<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zip<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zip<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zip<R>(array: ObservableInput<any>[]): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, R>(array: ObservableInput<T>[], resultSelector: (...values: Array<T>) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<R>(array: ObservableInput<any>[], resultSelector: (...values: Array<any>) => R): Observable<R>;\n\nexport function zip<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zip<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * ## Example\n * Combine age and name from different sources\n * ```javascript\n * let age$ = of<number>(27, 25, 29);\n * let name$ = of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = of<boolean>(true, true, false);\n *\n * zip(age$, name$, isDev$).pipe(\n *   map((age: number, name: string, isDev: boolean) => ({ age, name, isDev })),\n * )\n * .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n * ```\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const resultSelector = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof resultSelector === 'function') {\n    observables.pop();\n  }\n  return fromArray(observables, undefined).lift(new ZipOperator(resultSelector));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  resultSelector: (...values: Array<any>) => R;\n\n  constructor(resultSelector?: (...values: Array<any>) => R) {\n    this.resultSelector = resultSelector;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private resultSelector: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              resultSelector?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.resultSelector) {\n      this._tryresultSelector(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryresultSelector(args: any[]) {\n    let result: any;\n    try {\n      result = this.resultSelector.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { fromArray } from './fromArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { TeardownLogic } from '../types';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n *\n * ## Example\n * ### Subscribes to the observable that was the first to start emitting.\n *\n * ```javascript\n * const obs1 = interval(1000).pipe(mapTo('fast one'));\n * const obs2 = interval(3000).pipe(mapTo('medium one'));\n * const obs3 = interval(5000).pipe(mapTo('slow one'));\n *\n * race(obs3, obs1, obs2)\n * .subscribe(\n *   winner => console.log(winner)\n * );\n *\n * // result:\n * // a series of 'fast one'\n * ```\n *\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return fromArray(observables, undefined).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable as any, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","import { Observable } from '../Observable';\nimport { noop } from '../util/noop';\n\n/**\n * An Observable that emits no items to the Observer and never completes.\n *\n * ![](never.png)\n *\n * A simple Observable that emits neither values nor errors nor the completion\n * notification. It can be used for testing purposes or for composing with other\n * Observables. Please note that by never emitting a complete notification, this\n * Observable keeps the subscription from being disposed automatically.\n * Subscriptions need to be manually disposed.\n *\n * ##  Example\n * ### Emit the number 7, then never emit anything else (not even complete)\n * ```javascript\n * function info() {\n *   console.log('Will not be called');\n * }\n * const result = NEVER.pipe(startWith(7));\n * result.subscribe(x => console.log(x), info, info);\n *\n * ```\n *\n * @see {@link Observable}\n * @see {@link index/EMPTY}\n * @see {@link of}\n * @see {@link throwError}\n */\nexport const NEVER = new Observable<never>(noop);\n\n/**\n * @deprecated Deprecated in favor of using NEVER constant.\n */\nexport function never () {\n  return NEVER;\n}\n","import { isArray } from './isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput } from '../types';\nimport { isArray } from '../util/isArray';\nimport { EMPTY } from './empty';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { Subscriber } from '../Subscriber';\nimport { map } from '../operators/map';\n\n/* tslint:disable:max-line-length */\n// forkJoin([a$, b$, c$]);\nexport function forkJoin<T>(sources: [ObservableInput<T>]): Observable<T[]>;\nexport function forkJoin<T, T2>(sources: [ObservableInput<T>, ObservableInput<T2>]): Observable<[T, T2]>;\nexport function forkJoin<T, T2, T3>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>]): Observable<[T, T2, T3]>;\nexport function forkJoin<T, T2, T3, T4>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>, ObservableInput<T4>]): Observable<[T, T2, T3, T4]>;\nexport function forkJoin<T, T2, T3, T4, T5>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>, ObservableInput<T4>, ObservableInput<T5>]): Observable<[T, T2, T3, T4, T5]>;\nexport function forkJoin<T, T2, T3, T4, T5, T6>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>, ObservableInput<T4>, ObservableInput<T5>, ObservableInput<T6>]): Observable<[T, T2, T3, T4, T5, T6]>;\nexport function forkJoin<T>(sources: Array<ObservableInput<T>>): Observable<T[]>;\n\n// forkJoin(a$, b$, c$)\nexport function forkJoin<T>(v1: ObservableInput<T>): Observable<T[]>;\nexport function forkJoin<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function forkJoin<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function forkJoin<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function forkJoin<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function forkJoin<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n/** @deprecated resultSelector is deprecated, pipe to map instead */\nexport function forkJoin(...args: Array<ObservableInput<any>|Function>): Observable<any>;\nexport function forkJoin<T>(...sources: ObservableInput<T>[]): Observable<T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Joins last values emitted by passed Observables.\n *\n * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n *\n * ![](forkJoin.png)\n *\n * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n * or directly as arguments. If no input Observables are provided, resulting stream will complete\n * immediately.\n *\n * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n * array will have `n` values, where first value is the last thing emitted by the first Observable,\n * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n * not emit more than once and it will complete after that. If you need to emit combined values not only\n * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n * or {@link zip} instead.\n *\n * In order for resulting array to have the same length as the number of input Observables, whenever any of\n * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n * and it will not emit anything either, even if it already has some last values from other Observables.\n * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n * unless at any point some other Observable completes without emitting value, which brings us back to\n * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n * have to emit something at least once and complete.\n *\n * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n * will be immediately unsubscribed.\n *\n * Optionally `forkJoin` accepts project function, that will be called with values which normally\n * would land in emitted array. Whatever is returned by project function, will appear in output\n * Observable instead. This means that default project can be thought of as a function that takes\n * all its arguments and puts them into an array. Note that project function will be called only\n * when output Observable is supposed to emit a result.\n *\n * ## Examples\n * ### Use forkJoin with operator emitting immediately\n * ```javascript\n * import { forkJoin, of } from 'rxjs';\n *\n * const observable = forkJoin(\n *   of(1, 2, 3, 4),\n *   of(5, 6, 7, 8),\n * );\n * observable.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('This is how it ends!'),\n * );\n *\n * // Logs:\n * // [4, 8]\n * // \"This is how it ends!\"\n * ```\n *\n * ### Use forkJoin with operator emitting after some time\n * ```javascript\n * import { forkJoin, interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const observable = forkJoin(\n *   interval(1000).pipe(take(3)), // emit 0, 1, 2 every second and complete\n *   interval(500).pipe(take(4)),  // emit 0, 1, 2, 3 every half a second and complete\n * );\n * observable.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('This is how it ends!'),\n * );\n *\n * // Logs:\n * // [2, 3] after 3 seconds\n * // \"This is how it ends!\" immediately after\n * ```\n *\n * ### Use forkJoin with project function\n * ```javascript\n * import { jorkJoin, interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const observable = forkJoin(\n *   interval(1000).pipe(take(3)), // emit 0, 1, 2 every second and complete\n *   interval(500).pipe(take(4)),  // emit 0, 1, 2, 3 every half a second and complete\n * ).pipe(\n *   map(([n, m]) => n + m),\n * );\n * observable.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('This is how it ends!'),\n * );\n *\n * // Logs:\n * // 5 after 3 seconds\n * // \"This is how it ends!\" immediately after\n * ```\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n *\n * @param {...ObservableInput} sources Any number of Observables provided either as an array or as an arguments\n * passed directly to the operator.\n * @param {function} [project] Function that takes values emitted by input Observables and returns value\n * that will appear in resulting Observable instead of default array.\n * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n * or value from project function.\n */\nexport function forkJoin<T>(\n  ...sources: Array<ObservableInput<T> | ObservableInput<T>[] | Function>\n): Observable<T[]> {\n\n  let resultSelector: Function;\n  if (typeof sources[sources.length - 1] === 'function') {\n    // DEPRECATED PATH\n    resultSelector = sources.pop() as Function;\n  }\n\n  // if the first and only other argument is an array\n  // assume it's been called with `forkJoin([obs1, obs2, obs3])`\n  if (sources.length === 1 && isArray(sources[0])) {\n    sources = sources[0] as Array<ObservableInput<T>>;\n  }\n\n  if (sources.length === 0) {\n    return EMPTY;\n  }\n\n  if (resultSelector) {\n    // DEPRECATED PATH\n    return forkJoin(sources).pipe(\n      map(args => resultSelector(...args))\n    );\n  }\n\n  return new Observable(subscriber => {\n    return new ForkJoinSubscriber(subscriber, sources as Array<ObservableInput<T>>);\n  });\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T, R> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private values: T[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<R>,\n              private sources: Array<ObservableInput<T>>) {\n    super(destination);\n\n    const len = sources.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(innerSub as any)._hasValue) {\n      (innerSub as any)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const { destination, haveValues, values } = this;\n    const len = values.length;\n\n    if (!(innerSub as any)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      destination.next(values);\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { ObservableInput, OperatorFunction } from '../types';\nimport { map } from './map';\nimport { from } from '../observable/from';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, resultSelector: undefined, concurrent?: number): OperatorFunction<T, R>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * ![](mergeMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * ## Example\n * Map and flatten each letter to an Observable ticking every 1 second\n * ```javascript\n * const letters = of('a', 'b', 'c');\n * const result = letters.pipe(\n *   mergeMap(x => interval(1000).pipe(map(i => x+i))),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Number.POSITIVE_INFINITY\n): OperatorFunction<T, I|R> {\n  if (typeof resultSelector === 'function') {\n    // DEPRECATED PATH\n    return (source: Observable<T>) => source.pipe(\n      mergeMap((a, i) => from(project(a, i)).pipe(\n        map((b, ii) => resultSelector(a, b, i, ii)),\n      ), concurrent)\n    );\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapOperator(project, concurrent));\n}\n\nexport class MergeMapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<R>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<R>, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { isScheduler  } from '../util/isScheduler';\nimport { isArray  } from '../util/isArray';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { Operator } from '../Operator';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { fromArray } from './fromArray';\n\nconst NONE = {};\n\n/* tslint:disable:max-line-length */\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, R>(v1: ObservableInput<T>, resultSelector: (v1: T) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, resultSelector: (v1: T, v2: T2) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, resultSelector: (v1: T, v2: T2, v3: T3) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: SchedulerLike): Observable<R>;\n\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: SchedulerLike): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: SchedulerLike): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, R>(array: ObservableInput<T>[], resultSelector: (...values: Array<T>) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<R>(array: ObservableInput<any>[], resultSelector: (...values: Array<any>) => R, scheduler?: SchedulerLike): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | SchedulerLike>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | SchedulerLike>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | SchedulerLike>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * ![](combineLatest.png)\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, if some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n * ## Examples\n * ### Combine two timer Observables\n * ```javascript\n * const firstTimer = timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n * ```\n *\n * ### Combine an array of Observables\n * ```javascript\n * const observables = [1, 5, 10].map(\n *   n => of(n).pipe(\n *     delay(n * 1000),   // emit 0 and then emit n after n seconds\n *     startWith(0),\n *   )\n * );\n * const combined = combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n * ```\n *\n *\n * ### Use project function to dynamically calculate the Body-Mass Index\n * ```javascript\n * * const weight = of(70, 72, 76, 79, 75);\n * const height = of(1.76, 1.77, 1.78);\n * const bmi = combineLatest(weight, height).pipe(\n *   map(([w, h]) => w / (h * h)),\n * );\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n * ```\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    SchedulerLike>): Observable<R> {\n  let resultSelector: (...values: Array<any>) => R =  null;\n  let scheduler: SchedulerLike = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <SchedulerLike>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    resultSelector = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], resultSelector)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return fromArray(observables, scheduler).lift(new CombineLatestOperator<T, R>(resultSelector));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private resultSelector?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private resultSelector?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(NONE);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === NONE ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.resultSelector) {\n        this._tryResultSelector(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryResultSelector(values: any[]) {\n    let result: any;\n    try {\n      result = this.resultSelector.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { ObservableInput } from '../types';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeTo } from './subscribeTo';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription | void {\n  const destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  return subscribeTo(result)(destination);\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput } from '../types';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { Subscriber } from '../Subscriber';\n\nexport const subscribeTo = <T>(result: ObservableInput<T>) => {\n  if (result instanceof Observable) {\n    return (subscriber: Subscriber<T>) => {\n        if (result._isScalar) {\n        subscriber.next((result as any).value);\n        subscriber.complete();\n        return undefined;\n      } else {\n        return result.subscribe(subscriber);\n      }\n    };\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    return subscribeToObservable(result as any);\n  } else if (isArrayLike(result)) {\n    return subscribeToArray(result);\n  } else if (isPromise(result)) {\n    return subscribeToPromise(result as Promise<any>);\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    return subscribeToIterable(result as any);\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    throw new TypeError(msg);\n  }\n};\n","export function isPromise(value: any): value is PromiseLike<any> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { Subscriber } from '../Subscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * Subscribes to an object that implements Symbol.observable with the given\n * Subscriber.\n * @param obj An object that implements Symbol.observable\n */\nexport const subscribeToObservable = <T>(obj: any) => (subscriber: Subscriber<T>) => {\n  const obs = obj[Symbol_observable]();\n  if (typeof obs.subscribe !== 'function') {\n    // Should be caught by observable subscribe function error handling.\n    throw new TypeError('Provided object does not correctly implement Symbol.observable');\n  } else {\n    return obs.subscribe(subscriber);\n  }\n};\n","import { Subscriber } from '../Subscriber';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n\nexport const subscribeToIterable = <T>(iterable: Iterable<T>) => (subscriber: Subscriber<T>) => {\n  const iterator = iterable[Symbol_iterator]();\n  do {\n    const item = iterator.next();\n    if (item.done) {\n      subscriber.complete();\n      break;\n    }\n    subscriber.next(item.value);\n    if (subscriber.closed) {\n      break;\n    }\n  } while (true);\n\n  // Finalize the iterator if it happens to be a Generator\n  if (typeof iterator.return === 'function') {\n    subscriber.add(() => {\n      if (iterator.return) {\n        iterator.return();\n      }\n    });\n  }\n\n  return subscriber;\n};\n","export function getSymbolIterator(): symbol {\n  if (typeof Symbol !== 'function' || !Symbol.iterator) {\n    return '@@iterator' as any;\n  }\n\n  return Symbol.iterator;\n}\n\nexport const iterator = getSymbolIterator();\n\n/**\n * @deprecated use {@link iterator} instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from '../Subscriber';\nimport { hostReportError } from './hostReportError';\n\nexport const subscribeToPromise = <T>(promise: PromiseLike<T>) => (subscriber: Subscriber<T>) => {\n  promise.then(\n    (value) => {\n      if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n      }\n    },\n    (err: any) => subscriber.error(err)\n  )\n  .then(null, hostReportError);\n  return subscriber;\n};\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, public outerValue: T, public outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * ![](map.png)\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * ## Example\n * Map every click to the clientX position of that click\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const positions = clicks.pipe(map(ev => ev.clientX));\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","/**\n * An error thrown when duetime elapses.\n *\n * @see {@link timeout}\n *\n * @class TimeoutError\n */\nexport class TimeoutError extends Error {\n\n  public readonly name = 'TimeoutError';\n\n  constructor() {\n    super('Timeout has occurred');\n    (Object as any).setPrototypeOf(this, TimeoutError.prototype);\n  }\n}\n","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n\n  public readonly name = 'EmptyError';\n\n  constructor() {\n    super('no elements in sequence');\n    (Object as any).setPrototypeOf(this, EmptyError.prototype);\n  }\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n\n  public readonly name = 'ArgumentOutOfRangeError';\n\n  constructor() {\n    super('argument out of range');\n    (Object as any).setPrototypeOf(this, ArgumentOutOfRangeError.prototype);\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\nimport { SchedulerAction } from '../types';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction as any,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @nodoc\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  protected active: boolean = true;\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (!this.id) {\n      return super.schedule(state, delay);\n    }\n    this.active = false;\n    // If an action is rescheduled, we save allocations by mutating its state,\n    // pushing it to the end of the scheduler queue, and recycling the action.\n    // But since the VirtualTimeScheduler is used for testing, VirtualActions\n    // must be immutable so they can be inspected later.\n    const action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    (actions as Array<VirtualAction<T>>).sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  protected _execute(state: T, delay: number): any {\n    if (this.active === true) {\n      return super._execute(state, delay);\n    }\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link asyncScheduler} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * ## Example\n * Schedule div height animation\n * ```javascript\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.animationFrame.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n * ```\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\nimport { SchedulerAction } from '../types';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(\n      () => scheduler.flush(null)));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asapScheduler} scheduler.\n *\n * ## Examples\n * Use async scheduler to delay task\n * ```javascript\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n * ```\n *\n * Use async scheduler to repeat task in intervals\n * ```javascript\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n * ```\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link asyncScheduler} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * ## Example\n * Compare async and asap scheduler<\n * ```javascript\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n * ```\n * @static true\n * @name asap\n * @owner Scheduler\n */\n\nexport const asap = new AsapScheduler(AsapAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\nimport { SchedulerAction } from '../types';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","let nextHandle = 1;\n\nconst tasksByHandle: { [handle: string]: () => void } = {};\n\nfunction runIfPresent(handle: number) {\n  const cb = tasksByHandle[handle];\n  if (cb) {\n    cb();\n  }\n}\n\nexport const Immediate = {\n  setImmediate(cb: () => void): number {\n    const handle = nextHandle++;\n    tasksByHandle[handle] = cb;\n    Promise.resolve().then(() => runIfPresent(handle));\n    return handle;\n  },\n\n  clearImmediate(handle: number): void {\n    delete tasksByHandle[handle];\n  },\n};\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { Subject } from './Subject';\nimport { SchedulerLike } from './types';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: (ReplayEvent<T> | T)[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n  private _infiniteTimeWindow: boolean = false;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: SchedulerLike) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n\n    if (windowTime === Number.POSITIVE_INFINITY) {\n      this._infiniteTimeWindow = true;\n      this.next = this.nextInfiniteTimeWindow;\n    } else {\n      this.next = this.nextTimeWindow;\n    }\n  }\n\n  private nextInfiniteTimeWindow(value: T): void {\n    const _events = this._events;\n    _events.push(value);\n    // Since this method is invoked in every next() call than the buffer\n    // can overgrow the max size only by one item\n    if (_events.length > this._bufferSize) {\n      _events.shift();\n    }\n\n    super.next(value);\n  }\n\n  private nextTimeWindow(value: T): void {\n    this._events.push(new ReplayEvent(this._getNow(), value));\n    this._trimBufferThenGetEvents();\n\n    super.next(value);\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    // When `_infiniteTimeWindow === true` then the buffer is already trimmed\n    const _infiniteTimeWindow = this._infiniteTimeWindow;\n    const _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    const len = _events.length;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.isStopped || this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    if (_infiniteTimeWindow) {\n      for (let i = 0; i < len && !subscriber.closed; i++) {\n        subscriber.next(<T>_events[i]);\n      }\n    } else {\n      for (let i = 0; i < len && !subscriber.closed; i++) {\n        subscriber.next((<ReplayEvent<T>>_events[i]).value);\n      }\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = <ReplayEvent<T>[]>this._events;\n\n    const eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { MonoTypeOperatorFunction, PartialObserver, SchedulerAction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * ## Example\n * Ensure values in subscribe are called just before browser repaint.\n * ```javascript\n * const intervals = interval(10);                // Intervals are scheduled\n *                                                // with async scheduler by default...\n * intervals.pipe(\n *   observeOn(animationFrameScheduler),          // ...but we will observe on animationFrame\n * )                                              // scheduler to ensure smooth animation.\n * .subscribe(val => {\n *   someDiv.style.height = val + 'px';\n * });\n * ```\n *\n * @see {@link delay}\n *\n * @param {SchedulerLike} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: SchedulerLike, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: SchedulerLike, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  /** @nocollapse */\n  static dispatch(this: SchedulerAction<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: SchedulerLike,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { PartialObserver } from './types';\nimport { Observable } from './Observable';\nimport { empty } from './observable/empty';\nimport { of } from './observable/of';\nimport { throwError } from './observable/throwError';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return of(this.value);\n      case 'E':\n        return throwError(this.error);\n      case 'C':\n        return empty();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   * @nocollapse\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   * @nocollapse\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   * @nocollapse\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits an error notification.\n *\n * <span class=\"informal\">Just emits 'error', and nothing else.\n * </span>\n *\n * ![](throw.png)\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the error notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n * ### Emit the number 7, then emit an error\n * ```javascript\n * import { throwError, concat, of } from 'rxjs';\n *\n * const result = concat(of(7), throwError(new Error('oops!')));\n * result.subscribe(x => console.log(x), e => console.error(e));\n * ```javascript\n *\n * ### Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13\n * ```javascript\n * import { throwError, interval, of } from 'rxjs';\n * import { mergeMap } from 'rxjs/operators';\n *\n * interval(1000).pipe(\n *   mergeMap(x => x === 13\n *     ? throwError('Thirteens are bad')\n *     : of('a', 'b', 'c')\n *   ),\n * ).subscribe(x => console.log(x), e => console.error(e));\n * ```\n * @see {@link Observable}\n * @see {@link empty}\n * @see {@link never}\n * @see {@link of}\n *\n * @param {any} error The particular Error to pass to the error notification.\n * @param {SchedulerLike} [scheduler] A {@link SchedulerLike} to use for scheduling\n * the emission of the error notification.\n * @return {Observable} An error Observable: emits only the error notification\n * using the given error argument.\n * @static true\n * @name throw\n * @owner Observable\n */\nexport function throwError(error: any, scheduler?: SchedulerLike): Observable<never> {\n  if (!scheduler) {\n    return new Observable(subscriber => subscriber.error(error));\n  } else {\n    return new Observable(subscriber => scheduler.schedule(dispatch, 0, { error, subscriber }));\n  }\n}\n\ninterface DispatchArg {\n  error: any;\n  subscriber: Subscriber<any>;\n}\n\nfunction dispatch({ error, subscriber }: DispatchArg) {\n  subscriber.error(error);\n}\n","import { SchedulerLike } from '../types';\nimport { isScheduler } from '../util/isScheduler';\nimport { fromArray } from './fromArray';\nimport { empty } from './empty';\nimport { scalar } from './scalar';\nimport { Observable } from '../Observable';\n\n/* tslint:disable:max-line-length */\nexport function of<T>(a: T, scheduler?: SchedulerLike): Observable<T>;\nexport function of<T, T2>(a: T, b: T2, scheduler?: SchedulerLike): Observable<T | T2>;\nexport function of<T, T2, T3>(a: T, b: T2, c: T3, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport function of<T, T2, T3, T4>(a: T, b: T2, c: T3, d: T4, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport function of<T, T2, T3, T4, T5>(a: T, b: T2, c: T3, d: T4, e: T5, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport function of<T, T2, T3, T4, T5, T6>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function of<T, T2, T3, T4, T5, T6, T7>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, scheduler?: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7>;\nexport function of<T, T2, T3, T4, T5, T6, T7, T8>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, scheduler?: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8>;\nexport function of<T, T2, T3, T4, T5, T6, T7, T8, T9>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, i: T9, scheduler?: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9>;\nexport function of<T>(...args: Array<T | SchedulerLike>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Converts the arguments to an observable sequence.\n *\n * <span class=\"informal\">Each argument becomes a `next` notification.</span>\n *\n * ![](of.png)\n *\n * Unlike {@link from}, it does not do any flattening and emits each argument in whole\n * as a separate `next` notification.\n *\n * ## Examples\n *\n * Emit the values `10, 20, 30`\n *\n * ```javascript\n * of(10, 20, 30)\n * .subscribe(\n *   next => console.log('next:', next),\n *   err => console.log('error:', err),\n *   () => console.log('the end'),\n * );\n * // result:\n * // 'next: 10'\n * // 'next: 20'\n * // 'next: 30'\n *\n * ```\n *\n * Emit the array `[1,2,3]`\n *\n * ```javascript\n * of([1,2,3])\n * .subscribe(\n *   next => console.log('next:', next),\n *   err => console.log('error:', err),\n *   () => console.log('the end'),\n * );\n * // result:\n * // 'next: [1,2,3]'\n * ```\n *\n * @see {@link from}\n * @see {@link range}\n *\n * @param {...T} values A comma separated list of arguments you want to be emitted\n * @return {Observable} An Observable that emits the arguments\n * described above and then completes.\n * @method of\n * @owner Observable\n */\n\nexport function of<T>(...args: Array<T | SchedulerLike>): Observable<T> {\n  let scheduler = args[args.length - 1] as SchedulerLike;\n  if (isScheduler(scheduler)) {\n    args.pop();\n  } else {\n    scheduler = undefined;\n  }\n  switch (args.length) {\n    case 0:\n      return empty(scheduler);\n    case 1:\n      return scheduler ? fromArray(args as T[], scheduler) : scalar(args[0] as T);\n    default:\n      return fromArray(args as T[], scheduler);\n  }\n}\n","import { Observable } from '../Observable';\n\nexport function scalar<T>(value: T) {\n  const result = new Observable<T>(subscriber => {\n    subscriber.next(value);\n    subscriber.complete();\n  });\n  result._isScalar = true;\n  (result as any).value = value;\n  return result;\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { subscribeToArray } from '../util/subscribeToArray';\n\nexport function fromArray<T>(input: ArrayLike<T>, scheduler?: SchedulerLike) {\n  if (!scheduler) {\n    return new Observable<T>(subscribeToArray(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      let i = 0;\n      sub.add(scheduler.schedule(function () {\n        if (i === input.length) {\n          subscriber.complete();\n          return;\n        }\n        subscriber.next(input[i++]);\n        if (!subscriber.closed) {\n          sub.add(this.schedule());\n        }\n      }));\n      return sub;\n    });\n  }\n}\n","import { Subscriber } from '../Subscriber';\n\n/**\n * Subscribes to an ArrayLike with a subscriber\n * @param array The array or array-like to subscribe to\n */\nexport const subscribeToArray = <T>(array: ArrayLike<T>) => (subscriber: Subscriber<T>) => {\n  for (let i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n    subscriber.next(array[i]);\n  }\n  if (!subscriber.closed) {\n    subscriber.complete();\n  }\n};\n","import { SchedulerLike } from '../types';\n\nexport function isScheduler(value: any): value is SchedulerLike {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\n/**\n * The same Observable instance returned by any call to {@link empty} without a\n * `scheduler`. It is preferrable to use this over `empty()`.\n */\nexport const EMPTY = new Observable<never>(subscriber => subscriber.complete());\n\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits a complete notification.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.\n * </span>\n *\n * ![](empty.png)\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the complete notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n * ### Emit the number 7, then complete\n * ```javascript\n * const result = empty().pipe(startWith(7));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * ### Map and flatten only odd numbers to the sequence 'a', 'b', 'c'\n * ```javascript\n * const interval$ = interval(1000);\n * result = interval$.pipe(\n *   mergeMap(x => x % 2 === 1 ? of('a', 'b', 'c') : empty()),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following to the console:\n * // x is equal to the count on the interval eg(0,1,2,3,...)\n * // x will occur every 1000ms\n * // if x % 2 is equal to 1 print abc\n * // if x % 2 is not equal to 1 nothing will be output\n * ```\n *\n * @see {@link Observable}\n * @see {@link never}\n * @see {@link of}\n * @see {@link throwError}\n *\n * @param {SchedulerLike} [scheduler] A {@link SchedulerLike} to use for scheduling\n * the emission of the complete notification.\n * @return {Observable} An \"empty\" Observable: emits only the complete\n * notification.\n * @static true\n * @name empty\n * @owner Observable\n * @deprecated Deprecated in favor of using EMPTY constant.\n */\nexport function empty(scheduler?: SchedulerLike) {\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\n\nexport function emptyScheduled(scheduler: SchedulerLike) {\n  return new Observable<never>(subscriber => scheduler.schedule(() => subscriber.complete()));\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link asyncScheduler} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * ## Examples\n * Schedule recursively first, then do something\n * ```javascript\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n * ```\n *\n * Reschedule itself recursively\n * ```javascript\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n * ```\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { Scheduler } from '../Scheduler';\nimport { Action } from './Action';\nimport { AsyncAction } from './AsyncAction';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\n\nexport class AsyncScheduler extends Scheduler {\n  public static delegate?: Scheduler;\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   * @deprecated internal use only\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   * @deprecated internal use only\n   */\n  public scheduled: any = undefined;\n\n  constructor(SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    super(SchedulerAction, () => {\n      if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n        return AsyncScheduler.delegate.now();\n      } else {\n        return now();\n      }\n    });\n  }\n\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n      return AsyncScheduler.delegate.schedule(work, delay, state);\n    } else {\n      return super.schedule(work, delay, state);\n    }\n  }\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\nimport { SchedulerLike, SchedulerAction } from './types';\n\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an `Action`.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n * @deprecated Scheduler is an internal implementation detail of RxJS, and\n * should not be used directly. Rather, create your own class and implement\n * {@link SchedulerLike}\n */\nexport class Scheduler implements SchedulerLike {\n\n  /**\n   * Note: the extra arrow function wrapper is to make testing by overriding\n   * Date.now easier.\n   * @nocollapse\n   */\n  public static now: () => number = () => Date.now();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\nimport { SchedulerAction } from '../types';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { Action } from './Action';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n    }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { SchedulerAction } from '../types';\n\n/**\n * A unit of work to be executed in a `scheduler`. An action is typically\n * created from within a {@link SchedulerLike} and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: SchedulerAction<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent {@link SchedulerLike} for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { SubscriptionLike } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<SubscriptionLike>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * ![](groupBy.png)\n *\n * ##Examples\n * Group objects by id and return as array\n * ```typescript\n * interface Obj {\n *    id: number,\n *    name: string,\n * }\n * \n * of<Obj>(\n *   {id: 1, name: 'aze1'},\n *   {id: 2, name: 'sf2'},\n *   {id: 2, name: 'dg2'},\n *   {id: 1, name: 'erg1'},\n *   {id: 1, name: 'df1'},\n *   {id: 2, name: 'sfqfb2'},\n *   {id: 3, name: 'qfs3'},\n *   {id: 2, name: 'qsgqsfg2'},\n * ).pipe(\n *   groupBy(p => p.id),\n *   mergeMap((group$) => group$.pipe(reduce((acc, cur) => [...acc, cur], []))),\n * )\n * .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n * ```\n *\n * Pivot data on the id field\n * ```typescript\n * of<Obj>(\n *   {id: 1, name: 'aze1'},\n *   {id: 2, name: 'sf2'},\n *   {id: 2, name: 'dg2'},\n *   {id: 1, name: 'erg1'},\n *   {id: 1, name: 'df1'},\n *   {id: 2, name: 'sfqfb2'},\n *   {id: 3, name: 'qfs1'},\n *   {id: 2, name: 'qsgqsfg2'},\n * ).pipe(\n *   groupBy(p => p.id, p => p.name),\n *   mergeMap( (group$) => group$.pipe(reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))),\n *   map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)})),\n * )\n * .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n * ```\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T | R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = new Map<K, Subject<T | R>>();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = (this.subjectSelector ? this.subjectSelector() : new Subject<R>()) as Subject<T | R>;\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T | any>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  /** @deprecated Do not construct this type. Internal use only */\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const { refCountSubscription, groupSubject } = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { TeardownLogic } from '../types';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  /** @internal */\n  _isComplete = false;\n\n  constructor(public source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // range(0, 10).pipe(\n    //   publish(),\n    //   refCount(),\n    //   take(5),\n    // ).subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  } as MonoTypeOperatorFunction<T>;\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // range(0, 10).pipe(\n    //   publish(),\n    //   refCount(),\n    //   take(5),\n    // )\n    // .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  /**@nocollapse */\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './types';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n\n  public readonly name = 'ObjectUnsubscribedError';\n\n  constructor() {\n    super('object unsubscribed');\n    (Object as any).setPrototypeOf(this, ObjectUnsubscribedError.prototype);\n  }\n}\n","import { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { TeardownLogic, OperatorFunction, PartialObserver, Subscribable } from './types';\nimport { toSubscriber } from './util/toSubscriber';\nimport { iif } from './observable/iif';\nimport { throwError } from './observable/throwError';\nimport { observable as Symbol_observable } from '../internal/symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  /** Internal implementation detail, do not use directly. */\n  public _isScalar: boolean = false;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  source: Observable<any>;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   * @nocollapse\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to Observable's constructor, but most of the time it is\n   * a library implementation, which defines what will be emitted by an Observable, and when it be will emitted. This means\n   * that calling `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * the thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * of the following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, if the `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where the first function is equivalent\n   * of a `next` method, the second of an `error` method and the third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whichever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop the work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a `scheduler`.\n   *\n   * ## Example\n   * ### Subscribe with an Observer\n   * ```javascript\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Subscribe with functions\n   * ```javascript\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Cancel a subscription\n   * ```javascript\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   * ```\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(\n        this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n        this._subscribe(sink) :\n        this._trySubscribe(sink)\n      );\n    }\n\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      if (sink.syncErrorThrowable) {\n        sink.syncErrorThrowable = false;\n        if (sink.syncErrorThrown) {\n          throw sink.syncErrorValue;\n        }\n      }\n    }\n\n    return sink;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        sink.syncErrorThrown = true;\n        sink.syncErrorValue = err;\n      }\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        try {\n          next(value);\n        } catch (err) {\n          reject(err);\n          if (subscription) {\n            subscription.unsubscribe();\n          }\n        }\n      }, reject, resolve);\n    }) as Promise<void>;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const { source } = this;\n    return source && source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words. Deprecated in\n  // favor of iif and throwError functions.\n  /**\n   * @nocollapse\n   * @deprecated In favor of iif creation function: import { iif } from 'rxjs';\n   */\n  static if: typeof iif;\n  /**\n   * @nocollapse\n   * @deprecated In favor of throwError creation function: import { throwError } from 'rxjs';\n   */\n  static throw: typeof throwError;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>;\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>;\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>;\n  pipe<R>(...operations: OperatorFunction<any, any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * ### Example\n   * ```javascript\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   * ```\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\n  if (!promiseCtor) {\n    promiseCtor = config.Promise || Promise;\n  }\n\n  if (!promiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return promiseCtor;\n}\n","import { noop } from './noop';\nimport { UnaryFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\n  };\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nimport { PartialObserver } from '../types';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Observer, PartialObserver } from './types';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  /** @internal */ syncErrorValue: any = null;\n  /** @internal */ syncErrorThrown: boolean = false;\n  /** @internal */ syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          // HACK(benlesh): For situations where Node has multiple copies of rxjs in\n          // node_modules, we cannot rely on `instanceof` checks\n          if (isTrustedSubscriber(destinationOrNext)) {\n            const trustedSubscriber = destinationOrNext[rxSubscriberSymbol]() as Subscriber<any>;\n            this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n            this.destination = trustedSubscriber;\n            trustedSubscriber.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      const { useDeprecatedSynchronousErrorHandling } = config;\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n        hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError(err);\n        }\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError(err);\n      }\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    if (!config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError(err);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n\nfunction isTrustedSubscriber(obj: any) {\n  return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriberSymbol]);\n}\n","export const rxSubscriber =\n  (typeof Symbol === 'function' && typeof Symbol.for === 'function')\n    ? Symbol.for('rxSubscriber')\n    : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic } from './types';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY: Subscription = (function(empty: any) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  /** @internal */\n  protected _parent: Subscription = null;\n  /** @internal */\n  protected _parents: Subscription[] = null;\n  /** @internal */\n  private _subscriptions: SubscriptionLike[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  /** @internal */\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n\n  public readonly name = 'UnsubscriptionError';\n\n  constructor(public errors: any[]) {\n    super(errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (Object as any).setPrototypeOf(this, UnsubscriptionError.prototype);\n  }\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n}\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","import { Observer } from './types';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void {\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      throw err;\n    } else {\n      hostReportError(err);\n    }\n  },\n  complete(): void { /*noop*/ }\n};\n","/**\n * Throws an error on another job so that it's picked up by the runtime's\n * uncaught error handling mechanism.\n * @param err the error to throw\n */\nexport function hostReportError(err: any) {\n  setTimeout(() => { throw err; });\n}","let _enable_super_gross_mode_that_will_cause_bad_things = false;\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like what Promise contructor should used to create Promises\n */\nexport const config = {\n  /**\n   * The promise constructor used by default for methods such as\n   * {@link toPromise} and {@link forEach}\n   */\n  Promise: undefined as PromiseConstructorLike,\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME\n   * FOR MIGRATION REASONS.\n   */\n  set useDeprecatedSynchronousErrorHandling(value: boolean) {\n    if (value) {\n      const error = new Error();\n      console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n    } else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n      console.log('RxJS: Back to a better error behavior. Thank you. <3');\n    }\n    _enable_super_gross_mode_that_will_cause_bad_things = value;\n  },\n\n  get useDeprecatedSynchronousErrorHandling() {\n    return _enable_super_gross_mode_that_will_cause_bad_things;\n  },\n};\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nexport class ScrollSpyService {\npublic changes$: EventEmitter<any> = new EventEmitter();\nprivate observables: any = {};\n/**\n * @param {?} key\n * @return {?}\n */\npublic getObservable(key: string): any {\n    return this.observables[key];\n  }\n/**\n * @param {?} key\n * @param {?} observable\n * @return {?}\n */\npublic setObservable(key: string, observable: ReplaySubject<any> | Observable<any>) {\n    this.observables[key] = observable;\n    this.observables = this.observables = Object.assign({}, this.observables);\n    this.changes$.next({ index: key, change: 'set' });\n  }\n/**\n * @param {?} key\n * @return {?}\n */\npublic deleteObservable(key: string) {\n    delete this.observables[key];\n    this.observables = Object.assign({}, this.observables);\n    this.changes$.next({ index: key, change: 'delete' });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ScrollSpyService_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollSpyService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollSpyService.ctorParameters;\n/** @type {?} */\nScrollSpyService.prototype.changes$;\n/** @type {?} */\nScrollSpyService.prototype.observables;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["NgModule","Input","ElementRef","Renderer2","Directive","Injectable","Output","EventEmitter","tslib_1.__extends","WindowSubscriber","WindowOperator","dispatchNext","CommonModule","RouterModule","ChangeDetectorRef","ChangeDetectionStrategy","Component","Symbol_iterator","iterator","Symbol_observable","empty","refCount","higherOrderRefCount","RefCountSubscriber","RefCountOperator","rxSubscriberSymbol","observable","emptyObserver"],"mappings":"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"}
